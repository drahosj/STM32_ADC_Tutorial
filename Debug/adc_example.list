
adc_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800471c  0800471c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004724  08004724  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800472c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  0800479c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800479c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec16  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002313  00000000  00000000  0002ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  00030fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00031d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023af1  00000000  00000000  000329d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b72d  00000000  00000000  000564c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d514e  00000000  00000000  00061bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136d44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  00136dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800461c 	.word	0x0800461c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800461c 	.word	0x0800461c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_ADC1_Init+0x98>)
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_ADC1_Init+0xa0>)
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_ADC1_Init+0x98>)
 8000612:	f000 fc41 	bl	8000e98 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 f9b4 	bl	8000988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000620:	230a      	movs	r3, #10
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_ADC1_Init+0x98>)
 8000632:	f000 fdcd 	bl	80011d0 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 f9a4 	bl	8000988 <Error_Handler>
  }

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000098 	.word	0x20000098
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_ADC_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d127      	bne.n	80006c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <HAL_ADC_MspInit+0x80>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <HAL_ADC_MspInit+0x80>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_ADC_MspInit+0x80>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_ADC_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_ADC_MspInit+0x84>)
 80006c2:	f001 f8c5 	bl	8001850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020800 	.word	0x40020800

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a25      	ldr	r2, [pc, #148]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000768:	f001 fa04 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_GPIO_Init+0xdc>)
 8000782:	f001 f865 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000786:	2320      	movs	r3, #32
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0xd4>)
 800079e:	f001 f857 	bl	8001850 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	10210000 	.word	0x10210000
 80007b8:	40020800 	.word	0x40020800

080007bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	if ((file != 1) && (file != 0)) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d005      	beq.n	80007da <_write+0x1e>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <_write+0x1e>
		return -EINVAL;
 80007d4:	f06f 0315 	mvn.w	r3, #21
 80007d8:	e008      	b.n	80007ec <_write+0x30>
	}

	/* Don't bother error handling in case of timeout */
	HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 1000);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <_write+0x38>)
 80007e6:	f002 fb40 	bl	8002e6a <HAL_UART_Transmit>
	return len;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000120 	.word	0x20000120

080007f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d10e      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  HAL_ADC_Start(&hadc1);
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800080a:	f000 fb89 	bl	8000f20 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 50);
 800080e:	2132      	movs	r1, #50	; 0x32
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000812:	f000 fc4b 	bl	80010ac <HAL_ADC_PollForConversion>
		  unsigned int val = HAL_ADC_GetValue(&hadc1);
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000818:	f000 fccc 	bl	80011b4 <HAL_ADC_GetValue>
 800081c:	60f8      	str	r0, [r7, #12]
		  printf("ADC Value: 0x%08X\r\n", val);
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000822:	f002 ffb3 	bl	800378c <iprintf>
	}
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000e0 	.word	0x200000e0
 8000834:	20000098 	.word	0x20000098
 8000838:	08004634 	.word	0x08004634

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fab7 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f831 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f7ff ff47 	bl	80006dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800084e:	f7ff feaf 	bl	80005b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000852:	f000 f99f 	bl	8000b94 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000856:	f000 fa11 	bl	8000c7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *) "Hello World\n", 12, 500);
 800085a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800085e:	220c      	movs	r2, #12
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <main+0x58>)
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <main+0x5c>)
 8000864:	f002 fb01 	bl	8002e6a <HAL_UART_Transmit>

  /* Will work once write stub is set up correctly */
  printf("Hello from printf!\r\n");
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <main+0x60>)
 800086a:	f003 f803 	bl	8003874 <puts>

  /* Sample ADC*/
  HAL_ADC_Start(&hadc1);
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <main+0x64>)
 8000870:	f000 fb56 	bl	8000f20 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 50);
 8000874:	2132      	movs	r1, #50	; 0x32
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <main+0x64>)
 8000878:	f000 fc18 	bl	80010ac <HAL_ADC_PollForConversion>
  unsigned int val = HAL_ADC_GetValue(&hadc1);
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <main+0x64>)
 800087e:	f000 fc99 	bl	80011b4 <HAL_ADC_GetValue>
 8000882:	6078      	str	r0, [r7, #4]
  printf("ADC Value: 0x%08X\r\n", val);
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <main+0x68>)
 8000888:	f002 ff80 	bl	800378c <iprintf>
  HAL_TIM_Base_Start_IT(&htim2);
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <main+0x6c>)
 800088e:	f001 feca 	bl	8002626 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000892:	e7fe      	b.n	8000892 <main+0x56>
 8000894:	08004648 	.word	0x08004648
 8000898:	20000120 	.word	0x20000120
 800089c:	08004658 	.word	0x08004658
 80008a0:	20000098 	.word	0x20000098
 80008a4:	08004634 	.word	0x08004634
 80008a8:	200000e0 	.word	0x200000e0

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2234      	movs	r2, #52	; 0x34
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 ff5e 	bl	800377c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <SystemClock_Config+0xd4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a29      	ldr	r2, [pc, #164]	; (8000980 <SystemClock_Config+0xd4>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <SystemClock_Config+0xd4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <SystemClock_Config+0xd8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	4a22      	ldr	r2, [pc, #136]	; (8000984 <SystemClock_Config+0xd8>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <SystemClock_Config+0xd8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000920:	2310      	movs	r3, #16
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000924:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000928:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800092a:	2304      	movs	r3, #4
 800092c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fbee 	bl	800211c <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000946:	f000 f81f 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2302      	movs	r3, #2
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	2102      	movs	r1, #2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f91e 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000972:	f000 f809 	bl	8000988 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	; 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fef8 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 fa0c 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM2_IRQHandler+0x10>)
 8000a4a:	f001 fe10 	bl	800266e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000e0 	.word	0x200000e0

08000a58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	e00a      	b.n	8000a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	4601      	mov	r1, r0
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	b2ca      	uxtb	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbf0      	blt.n	8000a6a <_read+0x12>
	}

return len;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aba:	605a      	str	r2, [r3, #4]
	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_isatty>:

int _isatty(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 fdfc 	bl	8003728 <__errno>
 8000b30:	4602      	mov	r2, r0
 8000b32:	230c      	movs	r3, #12
 8000b34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20020000 	.word	0x20020000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	2000008c 	.word	0x2000008c
 8000b64:	20000168 	.word	0x20000168

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SystemInit+0x28>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <SystemInit+0x28>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SystemInit+0x28>)
 8000b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b82:	609a      	str	r2, [r3, #8]
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bba:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bc8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bdc:	f001 fcf8 	bl	80025d0 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000be6:	f7ff fecf 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bf8:	f001 fe41 	bl	800287e <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c02:	f7ff fec1 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000c14:	f002 f84c 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c1e:	f7ff feb3 	bl	8000988 <Error_Handler>
  }

}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000e0 	.word	0x200000e0

08000c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d115      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	201c      	movs	r0, #28
 8000c64:	f000 fdbd 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c68:	201c      	movs	r0, #28
 8000c6a:	f000 fdd6 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART2_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	f002 f88c 	bl	8002dd0 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f7ff fe63 	bl	8000988 <Error_Handler>
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000120 	.word	0x20000120
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_UART_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12b      	bne.n	8000d4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x88>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x88>)
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_UART_MspInit+0x88>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_UART_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0x8c>)
 8000d46:	f000 fd83 	bl	8001850 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d66:	e003      	b.n	8000d70 <LoopCopyDataInit>

08000d68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d6e:	3104      	adds	r1, #4

08000d70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d78:	d3f6      	bcc.n	8000d68 <CopyDataInit>
  ldr  r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d7c:	e002      	b.n	8000d84 <LoopFillZerobss>

08000d7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d80:	f842 3b04 	str.w	r3, [r2], #4

08000d84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d88:	d3f9      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d8a:	f7ff feed 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f002 fcd1 	bl	8003734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fd53 	bl	800083c <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d9c:	0800472c 	.word	0x0800472c
  ldr  r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000da4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000da8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000dac:	20000168 	.word	0x20000168

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 fcf5 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fdd6 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fd0d 	bl	8001836 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f000 fcd5 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000160 	.word	0x20000160

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000160 	.word	0x20000160

08000e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e033      	b.n	8000f16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fbcc 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d118      	bne.n	8000f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ede:	f023 0302 	bic.w	r3, r3, #2
 8000ee2:	f043 0202 	orr.w	r2, r3, #2
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 faa2 	bl	8001434 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f023 0303 	bic.w	r3, r3, #3
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
 8000f06:	e001      	b.n	8000f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Start+0x1a>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e0a5      	b.n	8001086 <HAL_ADC_Start+0x166>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d018      	beq.n	8000f82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <HAL_ADC_Start+0x174>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <HAL_ADC_Start+0x178>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9a      	lsrs	r2, r3, #18
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f74:	e002      	b.n	8000f7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f9      	bne.n	8000f76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d179      	bne.n	8001084 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fce:	d106      	bne.n	8000fde <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	f023 0206 	bic.w	r2, r3, #6
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	645a      	str	r2, [r3, #68]	; 0x44
 8000fdc:	e002      	b.n	8000fe4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_ADC_Start+0x17c>)
 8000fee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	2b00      	cmp	r3, #0
 8001004:	d12a      	bne.n	800105c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_ADC_Start+0x180>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d015      	beq.n	800103c <HAL_ADC_Start+0x11c>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <HAL_ADC_Start+0x184>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d105      	bne.n	8001026 <HAL_ADC_Start+0x106>
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_ADC_Start+0x17c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00a      	beq.n	800103c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <HAL_ADC_Start+0x188>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d129      	bne.n	8001084 <HAL_ADC_Start+0x164>
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_ADC_Start+0x17c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d823      	bhi.n	8001084 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11c      	bne.n	8001084 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	e013      	b.n	8001084 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_ADC_Start+0x180>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10e      	bne.n	8001084 <HAL_ADC_Start+0x164>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001082:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	431bde83 	.word	0x431bde83
 800109c:	40012300 	.word	0x40012300
 80010a0:	40012000 	.word	0x40012000
 80010a4:	40012100 	.word	0x40012100
 80010a8:	40012200 	.word	0x40012200

080010ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d113      	bne.n	80010f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d8:	d10b      	bne.n	80010f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f043 0220 	orr.w	r2, r3, #32
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e05c      	b.n	80011ac <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010f2:	f7ff fec5 	bl	8000e80 <HAL_GetTick>
 80010f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010f8:	e01a      	b.n	8001130 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001100:	d016      	beq.n	8001130 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d007      	beq.n	8001118 <HAL_ADC_PollForConversion+0x6c>
 8001108:	f7ff feba 	bl	8000e80 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d20b      	bcs.n	8001130 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f043 0204 	orr.w	r2, r3, #4
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e03d      	b.n	80011ac <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d1dd      	bne.n	80010fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f06f 0212 	mvn.w	r2, #18
 8001146:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d123      	bne.n	80011aa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d11f      	bne.n	80011aa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001182:	2b00      	cmp	r3, #0
 8001184:	d111      	bne.n	80011aa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1c>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e113      	b.n	8001414 <HAL_ADC_ConfigChannel+0x244>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d925      	bls.n	8001248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68d9      	ldr	r1, [r3, #12]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	3b1e      	subs	r3, #30
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43da      	mvns	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	400a      	ands	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68d9      	ldr	r1, [r3, #12]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	4603      	mov	r3, r0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4403      	add	r3, r0
 800123a:	3b1e      	subs	r3, #30
 800123c:	409a      	lsls	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	e022      	b.n	800128e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	2207      	movs	r2, #7
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	400a      	ands	r2, r1
 800126a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	4603      	mov	r3, r0
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4403      	add	r3, r0
 8001284:	409a      	lsls	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b06      	cmp	r3, #6
 8001294:	d824      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b05      	subs	r3, #5
 80012a8:	221f      	movs	r2, #31
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	400a      	ands	r2, r1
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b05      	subs	r3, #5
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	e04c      	b.n	800137a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d824      	bhi.n	8001332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3b23      	subs	r3, #35	; 0x23
 80012fa:	221f      	movs	r2, #31
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b23      	subs	r3, #35	; 0x23
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
 8001330:	e023      	b.n	800137a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b41      	subs	r3, #65	; 0x41
 8001344:	221f      	movs	r2, #31
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	400a      	ands	r2, r1
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b41      	subs	r3, #65	; 0x41
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_ADC_ConfigChannel+0x250>)
 800137c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <HAL_ADC_ConfigChannel+0x254>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d10f      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d10b      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_ADC_ConfigChannel+0x254>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_ADC_ConfigChannel+0x23a>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_ADC_ConfigChannel+0x258>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d003      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0x1f4>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b11      	cmp	r3, #17
 80013c2:	d122      	bne.n	800140a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <HAL_ADC_ConfigChannel+0x258>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d111      	bne.n	800140a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_ADC_ConfigChannel+0x25c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_ADC_ConfigChannel+0x260>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9a      	lsrs	r2, r3, #18
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40012300 	.word	0x40012300
 8001424:	40012000 	.word	0x40012000
 8001428:	10000012 	.word	0x10000012
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143c:	4b79      	ldr	r3, [pc, #484]	; (8001624 <ADC_Init+0x1f0>)
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	431a      	orrs	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	021a      	lsls	r2, r3, #8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800148c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6899      	ldr	r1, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	4a58      	ldr	r2, [pc, #352]	; (8001628 <ADC_Init+0x1f4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d022      	beq.n	8001512 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6899      	ldr	r1, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e00f      	b.n	8001532 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001530:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0202 	bic.w	r2, r2, #2
 8001540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e1b      	ldrb	r3, [r3, #24]
 800154c:	005a      	lsls	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01b      	beq.n	8001598 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800157e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	3b01      	subs	r3, #1
 800158c:	035a      	lsls	r2, r3, #13
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	e007      	b.n	80015a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	051a      	lsls	r2, r3, #20
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6899      	ldr	r1, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ea:	025a      	lsls	r2, r3, #9
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	029a      	lsls	r2, r3, #10
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40012300 	.word	0x40012300
 8001628:	0f000001 	.word	0x0f000001

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ac:	f7ff ff8e 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff29 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff3e 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff8e 	bl	8001720 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff31 	bl	8001690 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	e165      	b.n	8001b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8154 	bne.w	8001b32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d00b      	beq.n	80018aa <HAL_GPIO_Init+0x5a>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189e:	2b11      	cmp	r3, #17
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0xfc>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b12      	cmp	r3, #18
 800194a:	d123      	bne.n	8001994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80ae 	beq.w	8001b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <HAL_GPIO_Init+0x2fc>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <HAL_GPIO_Init+0x2fc>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_GPIO_Init+0x2fc>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f2:	4a57      	ldr	r2, [pc, #348]	; (8001b50 <HAL_GPIO_Init+0x300>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d025      	beq.n	8001a6a <HAL_GPIO_Init+0x21a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x308>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <HAL_GPIO_Init+0x216>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x30c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0x212>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x310>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x314>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x20a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x206>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_GPIO_Init+0x31c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x202>
 8001a4e:	2306      	movs	r3, #6
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a52:	2307      	movs	r3, #7
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x21c>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7c:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aae:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f ae96 	bls.w	800186c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3724      	adds	r7, #36	; 0x24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0cc      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d90c      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b8      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	494d      	ldr	r1, [pc, #308]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d044      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d119      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e06f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e067      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4934      	ldr	r1, [pc, #208]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7ff f8f2 	bl	8000e80 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f8ee 	bl	8000e80 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20c      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e032      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2e:	f000 f855 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d32:	4601      	mov	r1, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	fa21 f303 	lsr.w	r3, r1, r3
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f852 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	0800466c 	.word	0x0800466c
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d94:	4601      	mov	r1, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	0800467c 	.word	0x0800467c

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffdc 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0b5b      	lsrs	r3, r3, #13
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	0800467c 	.word	0x0800467c

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df6:	4bc6      	ldr	r3, [pc, #792]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	f200 817e 	bhi.w	8002100 <HAL_RCC_GetSysClockFreq+0x324>
 8001e04:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <HAL_RCC_GetSysClockFreq+0x30>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e41 	.word	0x08001e41
 8001e10:	08002101 	.word	0x08002101
 8001e14:	08002101 	.word	0x08002101
 8001e18:	08002101 	.word	0x08002101
 8001e1c:	08001e47 	.word	0x08001e47
 8001e20:	08002101 	.word	0x08002101
 8001e24:	08002101 	.word	0x08002101
 8001e28:	08002101 	.word	0x08002101
 8001e2c:	08001e4d 	.word	0x08001e4d
 8001e30:	08002101 	.word	0x08002101
 8001e34:	08002101 	.word	0x08002101
 8001e38:	08002101 	.word	0x08002101
 8001e3c:	08001fa9 	.word	0x08001fa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4bb4      	ldr	r3, [pc, #720]	; (8002114 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e42:	613b      	str	r3, [r7, #16]
       break;
 8001e44:	e15f      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e46:	4bb4      	ldr	r3, [pc, #720]	; (8002118 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001e48:	613b      	str	r3, [r7, #16]
      break;
 8001e4a:	e15c      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e4c:	4bb0      	ldr	r3, [pc, #704]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e54:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e56:	4bae      	ldr	r3, [pc, #696]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d04a      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e62:	4bab      	ldr	r3, [pc, #684]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	f04f 0400 	mov.w	r4, #0
 8001e6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	ea03 0501 	and.w	r5, r3, r1
 8001e78:	ea04 0602 	and.w	r6, r4, r2
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	4632      	mov	r2, r6
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f04f 0400 	mov.w	r4, #0
 8001e88:	0154      	lsls	r4, r2, #5
 8001e8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e8e:	014b      	lsls	r3, r1, #5
 8001e90:	4619      	mov	r1, r3
 8001e92:	4622      	mov	r2, r4
 8001e94:	1b49      	subs	r1, r1, r5
 8001e96:	eb62 0206 	sbc.w	r2, r2, r6
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f04f 0400 	mov.w	r4, #0
 8001ea2:	0194      	lsls	r4, r2, #6
 8001ea4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ea8:	018b      	lsls	r3, r1, #6
 8001eaa:	1a5b      	subs	r3, r3, r1
 8001eac:	eb64 0402 	sbc.w	r4, r4, r2
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	00e2      	lsls	r2, r4, #3
 8001eba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ebe:	00d9      	lsls	r1, r3, #3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4614      	mov	r4, r2
 8001ec4:	195b      	adds	r3, r3, r5
 8001ec6:	eb44 0406 	adc.w	r4, r4, r6
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	0262      	lsls	r2, r4, #9
 8001ed4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ed8:	0259      	lsls	r1, r3, #9
 8001eda:	460b      	mov	r3, r1
 8001edc:	4614      	mov	r4, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f04f 0400 	mov.w	r4, #0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	f7fe f9e0 	bl	80002b0 <__aeabi_uldivmod>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e049      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef8:	4b85      	ldr	r3, [pc, #532]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	f04f 0400 	mov.w	r4, #0
 8001f02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	ea03 0501 	and.w	r5, r3, r1
 8001f0e:	ea04 0602 	and.w	r6, r4, r2
 8001f12:	4629      	mov	r1, r5
 8001f14:	4632      	mov	r2, r6
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f04f 0400 	mov.w	r4, #0
 8001f1e:	0154      	lsls	r4, r2, #5
 8001f20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f24:	014b      	lsls	r3, r1, #5
 8001f26:	4619      	mov	r1, r3
 8001f28:	4622      	mov	r2, r4
 8001f2a:	1b49      	subs	r1, r1, r5
 8001f2c:	eb62 0206 	sbc.w	r2, r2, r6
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	f04f 0400 	mov.w	r4, #0
 8001f38:	0194      	lsls	r4, r2, #6
 8001f3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f3e:	018b      	lsls	r3, r1, #6
 8001f40:	1a5b      	subs	r3, r3, r1
 8001f42:	eb64 0402 	sbc.w	r4, r4, r2
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f54:	00d9      	lsls	r1, r3, #3
 8001f56:	460b      	mov	r3, r1
 8001f58:	4614      	mov	r4, r2
 8001f5a:	195b      	adds	r3, r3, r5
 8001f5c:	eb44 0406 	adc.w	r4, r4, r6
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	02a2      	lsls	r2, r4, #10
 8001f6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f6e:	0299      	lsls	r1, r3, #10
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	4621      	mov	r1, r4
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f04f 0400 	mov.w	r4, #0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4623      	mov	r3, r4
 8001f82:	f7fe f995 	bl	80002b0 <__aeabi_uldivmod>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f8c:	4b60      	ldr	r3, [pc, #384]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	3301      	adds	r3, #1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	613b      	str	r3, [r7, #16]
      break;
 8001fa6:	e0ae      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa8:	4b59      	ldr	r3, [pc, #356]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb2:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d04a      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b54      	ldr	r3, [pc, #336]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	f04f 0400 	mov.w	r4, #0
 8001fc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	ea03 0501 	and.w	r5, r3, r1
 8001fd4:	ea04 0602 	and.w	r6, r4, r2
 8001fd8:	4629      	mov	r1, r5
 8001fda:	4632      	mov	r2, r6
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f04f 0400 	mov.w	r4, #0
 8001fe4:	0154      	lsls	r4, r2, #5
 8001fe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fea:	014b      	lsls	r3, r1, #5
 8001fec:	4619      	mov	r1, r3
 8001fee:	4622      	mov	r2, r4
 8001ff0:	1b49      	subs	r1, r1, r5
 8001ff2:	eb62 0206 	sbc.w	r2, r2, r6
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	f04f 0400 	mov.w	r4, #0
 8001ffe:	0194      	lsls	r4, r2, #6
 8002000:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002004:	018b      	lsls	r3, r1, #6
 8002006:	1a5b      	subs	r3, r3, r1
 8002008:	eb64 0402 	sbc.w	r4, r4, r2
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	00e2      	lsls	r2, r4, #3
 8002016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800201a:	00d9      	lsls	r1, r3, #3
 800201c:	460b      	mov	r3, r1
 800201e:	4614      	mov	r4, r2
 8002020:	195b      	adds	r3, r3, r5
 8002022:	eb44 0406 	adc.w	r4, r4, r6
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	0262      	lsls	r2, r4, #9
 8002030:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002034:	0259      	lsls	r1, r3, #9
 8002036:	460b      	mov	r3, r1
 8002038:	4614      	mov	r4, r2
 800203a:	4618      	mov	r0, r3
 800203c:	4621      	mov	r1, r4
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f04f 0400 	mov.w	r4, #0
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	f7fe f932 	bl	80002b0 <__aeabi_uldivmod>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e049      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002054:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	f04f 0400 	mov.w	r4, #0
 800205e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	ea03 0501 	and.w	r5, r3, r1
 800206a:	ea04 0602 	and.w	r6, r4, r2
 800206e:	4629      	mov	r1, r5
 8002070:	4632      	mov	r2, r6
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	f04f 0400 	mov.w	r4, #0
 800207a:	0154      	lsls	r4, r2, #5
 800207c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002080:	014b      	lsls	r3, r1, #5
 8002082:	4619      	mov	r1, r3
 8002084:	4622      	mov	r2, r4
 8002086:	1b49      	subs	r1, r1, r5
 8002088:	eb62 0206 	sbc.w	r2, r2, r6
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	f04f 0400 	mov.w	r4, #0
 8002094:	0194      	lsls	r4, r2, #6
 8002096:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800209a:	018b      	lsls	r3, r1, #6
 800209c:	1a5b      	subs	r3, r3, r1
 800209e:	eb64 0402 	sbc.w	r4, r4, r2
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020b0:	00d9      	lsls	r1, r3, #3
 80020b2:	460b      	mov	r3, r1
 80020b4:	4614      	mov	r4, r2
 80020b6:	195b      	adds	r3, r3, r5
 80020b8:	eb44 0406 	adc.w	r4, r4, r6
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	02a2      	lsls	r2, r4, #10
 80020c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020ca:	0299      	lsls	r1, r3, #10
 80020cc:	460b      	mov	r3, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	4621      	mov	r1, r4
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f04f 0400 	mov.w	r4, #0
 80020da:	461a      	mov	r2, r3
 80020dc:	4623      	mov	r3, r4
 80020de:	f7fe f8e7 	bl	80002b0 <__aeabi_uldivmod>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0f1b      	lsrs	r3, r3, #28
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	613b      	str	r3, [r7, #16]
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_RCC_GetSysClockFreq+0x338>)
 8002102:	613b      	str	r3, [r7, #16]
      break;
 8002104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002106:	693b      	ldr	r3, [r7, #16]
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	00f42400 	.word	0x00f42400
 8002118:	007a1200 	.word	0x007a1200

0800211c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8083 	beq.w	800223c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002136:	4b95      	ldr	r3, [pc, #596]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d019      	beq.n	8002176 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215a:	d00c      	beq.n	8002176 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215c:	4b8b      	ldr	r3, [pc, #556]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d112      	bne.n	800218e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002168:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002174:	d10b      	bne.n	800218e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	4b85      	ldr	r3, [pc, #532]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d05b      	beq.n	800223a <HAL_RCC_OscConfig+0x11e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d157      	bne.n	800223a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e216      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x8a>
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7b      	ldr	r2, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e01d      	b.n	80021e2 <HAL_RCC_OscConfig+0xc6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0xae>
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a75      	ldr	r2, [pc, #468]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a72      	ldr	r2, [pc, #456]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0xc6>
 80021ca:	4b70      	ldr	r3, [pc, #448]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6f      	ldr	r2, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6d      	ldr	r3, [pc, #436]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6c      	ldr	r2, [pc, #432]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80021dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d013      	beq.n	8002212 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe fe49 	bl	8000e80 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f2:	f7fe fe45 	bl	8000e80 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b64      	cmp	r3, #100	; 0x64
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1db      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0xd6>
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe fe35 	bl	8000e80 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221a:	f7fe fe31 	bl	8000e80 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1c7      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222c:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0xfe>
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d06f      	beq.n	8002328 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	d017      	beq.n	8002284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002254:	4b4d      	ldr	r3, [pc, #308]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800225c:	2b08      	cmp	r3, #8
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002260:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d11c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002278:	4b44      	ldr	r3, [pc, #272]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d116      	bne.n	80022b2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x180>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d001      	beq.n	800229c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e18f      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4938      	ldr	r1, [pc, #224]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b0:	e03a      	b.n	8002328 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fdde 	bl	8000e80 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe fdda 	bl	8000e80 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e170      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4925      	ldr	r1, [pc, #148]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
 80022fa:	e015      	b.n	8002328 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fdbd 	bl	8000e80 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7fe fdb9 	bl	8000e80 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e14f      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d037      	beq.n	80023a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_RCC_OscConfig+0x278>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7fe fd9d 	bl	8000e80 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234a:	f7fe fd99 	bl	8000e80 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e12f      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_OscConfig+0x270>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x22e>
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_OscConfig+0x278>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe fd86 	bl	8000e80 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002376:	e00f      	b.n	8002398 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe fd82 	bl	8000e80 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d908      	bls.n	8002398 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e118      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	42470000 	.word	0x42470000
 8002394:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b8a      	ldr	r3, [pc, #552]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e9      	bne.n	8002378 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8097 	beq.w	80024e0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b83      	ldr	r3, [pc, #524]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b7f      	ldr	r3, [pc, #508]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b7c      	ldr	r3, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e2:	4b79      	ldr	r3, [pc, #484]	; (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d118      	bne.n	8002420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fa:	f7fe fd41 	bl	8000e80 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002402:	f7fe fd3d 	bl	8000e80 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0d3      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x31a>
 8002428:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
 8002434:	e01c      	b.n	8002470 <HAL_RCC_OscConfig+0x354>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x33c>
 800243e:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a60      	ldr	r2, [pc, #384]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0x354>
 8002458:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a56      	ldr	r2, [pc, #344]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800246a:	f023 0304 	bic.w	r3, r3, #4
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d015      	beq.n	80024a4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7fe fd02 	bl	8000e80 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fcfe 	bl	8000e80 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e092      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ee      	beq.n	8002480 <HAL_RCC_OscConfig+0x364>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fcec 	bl	8000e80 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fce8 	bl	8000e80 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e07c      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ee      	bne.n	80024ac <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4a3a      	ldr	r2, [pc, #232]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d068      	beq.n	80025ba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d060      	beq.n	80025b6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d145      	bne.n	8002588 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCC_OscConfig+0x4b0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe fcbd 	bl	8000e80 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fcb9 	bl	8000e80 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e04f      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	019b      	lsls	r3, r3, #6
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	3b01      	subs	r3, #1
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	071b      	lsls	r3, r3, #28
 8002554:	491b      	ldr	r1, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_RCC_OscConfig+0x4b0>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fc8e 	bl	8000e80 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fc8a 	bl	8000e80 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e020      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x44c>
 8002586:	e018      	b.n	80025ba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0x4b0>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fc77 	bl	8000e80 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fc73 	bl	8000e80 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e009      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_OscConfig+0x4a8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x47a>
 80025b4:	e001      	b.n	80025ba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42470060 	.word	0x42470060

080025d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e01d      	b.n	800261e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe fb1a 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 fa14 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b06      	cmp	r3, #6
 800264e:	d007      	beq.n	8002660 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d122      	bne.n	80026ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d11b      	bne.n	80026ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0202 	mvn.w	r2, #2
 800269a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f9a5 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 80026b6:	e005      	b.n	80026c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f997 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9a8 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d122      	bne.n	800271e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d11b      	bne.n	800271e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0204 	mvn.w	r2, #4
 80026ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f97b 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 800270a:	e005      	b.n	8002718 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f96d 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f97e 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b08      	cmp	r3, #8
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0208 	mvn.w	r2, #8
 8002742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2204      	movs	r2, #4
 8002748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f951 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f943 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f954 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b10      	cmp	r3, #16
 800277e:	d122      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d11b      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0210 	mvn.w	r2, #16
 8002796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2208      	movs	r2, #8
 800279c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f927 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f919 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f92a 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10e      	bne.n	80027f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0201 	mvn.w	r2, #1
 80027ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe f803 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d10e      	bne.n	800281e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d107      	bne.n	800281e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 facf 	bl	8002dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d10e      	bne.n	800284a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d107      	bne.n	800284a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8ef 	bl	8002a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	d10e      	bne.n	8002876 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b20      	cmp	r3, #32
 8002864:	d107      	bne.n	8002876 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f06f 0220 	mvn.w	r2, #32
 800286e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fa99 	bl	8002da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_TIM_ConfigClockSource+0x18>
 8002892:	2302      	movs	r3, #2
 8002894:	e0a6      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x166>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d067      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x120>
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d80b      	bhi.n	80028ea <HAL_TIM_ConfigClockSource+0x6c>
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d073      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x140>
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d802      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x62>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d06f      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80028de:	e078      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d06c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x140>
 80028e4:	2b30      	cmp	r3, #48	; 0x30
 80028e6:	d06a      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028e8:	e073      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028ea:	2b70      	cmp	r3, #112	; 0x70
 80028ec:	d00d      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x8c>
 80028ee:	2b70      	cmp	r3, #112	; 0x70
 80028f0:	d804      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x7e>
 80028f2:	2b50      	cmp	r3, #80	; 0x50
 80028f4:	d033      	beq.n	800295e <HAL_TIM_ConfigClockSource+0xe0>
 80028f6:	2b60      	cmp	r3, #96	; 0x60
 80028f8:	d041      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028fa:	e06a      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d066      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x152>
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	d017      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002908:	e063      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f000 f9a9 	bl	8002c70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800292c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	609a      	str	r2, [r3, #8]
      break;
 8002936:	e04c      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f000 f992 	bl	8002c70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800295a:	609a      	str	r2, [r3, #8]
      break;
 800295c:	e039      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 f906 	bl	8002b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2150      	movs	r1, #80	; 0x50
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f95f 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 800297c:	e029      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	f000 f925 	bl	8002bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2160      	movs	r1, #96	; 0x60
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f94f 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 800299c:	e019      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 f8e6 	bl	8002b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f93f 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 80029bc:	e009      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f000 f936 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 80029ce:	e000      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80029d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a40      	ldr	r2, [pc, #256]	; (8002b50 <TIM_Base_SetConfig+0x114>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5a:	d00f      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <TIM_Base_SetConfig+0x118>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <TIM_Base_SetConfig+0x11c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <TIM_Base_SetConfig+0x120>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <TIM_Base_SetConfig+0x124>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d108      	bne.n	8002a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2f      	ldr	r2, [pc, #188]	; (8002b50 <TIM_Base_SetConfig+0x114>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02b      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d027      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <TIM_Base_SetConfig+0x118>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d023      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <TIM_Base_SetConfig+0x11c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <TIM_Base_SetConfig+0x120>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01b      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <TIM_Base_SetConfig+0x124>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d017      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a28      	ldr	r2, [pc, #160]	; (8002b64 <TIM_Base_SetConfig+0x128>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <TIM_Base_SetConfig+0x12c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00f      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <TIM_Base_SetConfig+0x130>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <TIM_Base_SetConfig+0x134>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <TIM_Base_SetConfig+0x138>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <TIM_Base_SetConfig+0x13c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d108      	bne.n	8002b00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <TIM_Base_SetConfig+0x114>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0xf8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <TIM_Base_SetConfig+0x124>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d103      	bne.n	8002b3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	615a      	str	r2, [r3, #20]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40014800 	.word	0x40014800
 8002b70:	40001800 	.word	0x40001800
 8002b74:	40001c00 	.word	0x40001c00
 8002b78:	40002000 	.word	0x40002000

08002b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f023 030a 	bic.w	r3, r3, #10
 8002bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b087      	sub	sp, #28
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0210 	bic.w	r2, r3, #16
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	031b      	lsls	r3, r3, #12
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f043 0307 	orr.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	021a      	lsls	r2, r3, #8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e05a      	b.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d01d      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40010400 	.word	0x40010400
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40001800 	.word	0x40001800

08002da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e03f      	b.n	8002e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd ff6a 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f90b 	bl	8003030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b088      	sub	sp, #32
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 8083 	bne.w	8002f92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_UART_Transmit+0x2e>
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e07b      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Transmit+0x40>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e074      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2221      	movs	r2, #33	; 0x21
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ec0:	f7fd ffde 	bl	8000e80 <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002eda:	e042      	b.n	8002f62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef2:	d122      	bne.n	8002f3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f84c 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e042      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	e017      	b.n	8002f62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	e013      	b.n	8002f62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f829 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e01f      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	60ba      	str	r2, [r7, #8]
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1b7      	bne.n	8002edc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2140      	movs	r1, #64	; 0x40
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f810 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e006      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fac:	e02c      	b.n	8003008 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb4:	d028      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002fbc:	f7fd ff60 	bl	8000e80 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d21d      	bcs.n	8003008 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e00f      	b.n	8003028 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	429a      	cmp	r2, r3
 8003024:	d0c3      	beq.n	8002fae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003072:	f023 030c 	bic.w	r3, r3, #12
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	430b      	orrs	r3, r1
 800307e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309e:	f040 818b 	bne.w	80033b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4ac1      	ldr	r2, [pc, #772]	; (80033ac <UART_SetConfig+0x37c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d005      	beq.n	80030b8 <UART_SetConfig+0x88>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4abf      	ldr	r2, [pc, #764]	; (80033b0 <UART_SetConfig+0x380>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	f040 80bd 	bne.w	8003232 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030b8:	f7fe fe7c 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 80030bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	461d      	mov	r5, r3
 80030c2:	f04f 0600 	mov.w	r6, #0
 80030c6:	46a8      	mov	r8, r5
 80030c8:	46b1      	mov	r9, r6
 80030ca:	eb18 0308 	adds.w	r3, r8, r8
 80030ce:	eb49 0409 	adc.w	r4, r9, r9
 80030d2:	4698      	mov	r8, r3
 80030d4:	46a1      	mov	r9, r4
 80030d6:	eb18 0805 	adds.w	r8, r8, r5
 80030da:	eb49 0906 	adc.w	r9, r9, r6
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030f2:	4688      	mov	r8, r1
 80030f4:	4691      	mov	r9, r2
 80030f6:	eb18 0005 	adds.w	r0, r8, r5
 80030fa:	eb49 0106 	adc.w	r1, r9, r6
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	461d      	mov	r5, r3
 8003104:	f04f 0600 	mov.w	r6, #0
 8003108:	196b      	adds	r3, r5, r5
 800310a:	eb46 0406 	adc.w	r4, r6, r6
 800310e:	461a      	mov	r2, r3
 8003110:	4623      	mov	r3, r4
 8003112:	f7fd f8cd 	bl	80002b0 <__aeabi_uldivmod>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	461a      	mov	r2, r3
 800311c:	4ba5      	ldr	r3, [pc, #660]	; (80033b4 <UART_SetConfig+0x384>)
 800311e:	fba3 2302 	umull	r2, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	461d      	mov	r5, r3
 800312c:	f04f 0600 	mov.w	r6, #0
 8003130:	46a9      	mov	r9, r5
 8003132:	46b2      	mov	sl, r6
 8003134:	eb19 0309 	adds.w	r3, r9, r9
 8003138:	eb4a 040a 	adc.w	r4, sl, sl
 800313c:	4699      	mov	r9, r3
 800313e:	46a2      	mov	sl, r4
 8003140:	eb19 0905 	adds.w	r9, r9, r5
 8003144:	eb4a 0a06 	adc.w	sl, sl, r6
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800315c:	4689      	mov	r9, r1
 800315e:	4692      	mov	sl, r2
 8003160:	eb19 0005 	adds.w	r0, r9, r5
 8003164:	eb4a 0106 	adc.w	r1, sl, r6
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	461d      	mov	r5, r3
 800316e:	f04f 0600 	mov.w	r6, #0
 8003172:	196b      	adds	r3, r5, r5
 8003174:	eb46 0406 	adc.w	r4, r6, r6
 8003178:	461a      	mov	r2, r3
 800317a:	4623      	mov	r3, r4
 800317c:	f7fd f898 	bl	80002b0 <__aeabi_uldivmod>
 8003180:	4603      	mov	r3, r0
 8003182:	460c      	mov	r4, r1
 8003184:	461a      	mov	r2, r3
 8003186:	4b8b      	ldr	r3, [pc, #556]	; (80033b4 <UART_SetConfig+0x384>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	; 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	4a86      	ldr	r2, [pc, #536]	; (80033b4 <UART_SetConfig+0x384>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031a8:	4498      	add	r8, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	461d      	mov	r5, r3
 80031ae:	f04f 0600 	mov.w	r6, #0
 80031b2:	46a9      	mov	r9, r5
 80031b4:	46b2      	mov	sl, r6
 80031b6:	eb19 0309 	adds.w	r3, r9, r9
 80031ba:	eb4a 040a 	adc.w	r4, sl, sl
 80031be:	4699      	mov	r9, r3
 80031c0:	46a2      	mov	sl, r4
 80031c2:	eb19 0905 	adds.w	r9, r9, r5
 80031c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031de:	4689      	mov	r9, r1
 80031e0:	4692      	mov	sl, r2
 80031e2:	eb19 0005 	adds.w	r0, r9, r5
 80031e6:	eb4a 0106 	adc.w	r1, sl, r6
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	461d      	mov	r5, r3
 80031f0:	f04f 0600 	mov.w	r6, #0
 80031f4:	196b      	adds	r3, r5, r5
 80031f6:	eb46 0406 	adc.w	r4, r6, r6
 80031fa:	461a      	mov	r2, r3
 80031fc:	4623      	mov	r3, r4
 80031fe:	f7fd f857 	bl	80002b0 <__aeabi_uldivmod>
 8003202:	4603      	mov	r3, r0
 8003204:	460c      	mov	r4, r1
 8003206:	461a      	mov	r2, r3
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <UART_SetConfig+0x384>)
 800320a:	fba3 1302 	umull	r1, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2164      	movs	r1, #100	; 0x64
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	3332      	adds	r3, #50	; 0x32
 800321c:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <UART_SetConfig+0x384>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	f003 0207 	and.w	r2, r3, #7
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4442      	add	r2, r8
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e26f      	b.n	8003712 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003232:	f7fe fdab 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8003236:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	461d      	mov	r5, r3
 800323c:	f04f 0600 	mov.w	r6, #0
 8003240:	46a8      	mov	r8, r5
 8003242:	46b1      	mov	r9, r6
 8003244:	eb18 0308 	adds.w	r3, r8, r8
 8003248:	eb49 0409 	adc.w	r4, r9, r9
 800324c:	4698      	mov	r8, r3
 800324e:	46a1      	mov	r9, r4
 8003250:	eb18 0805 	adds.w	r8, r8, r5
 8003254:	eb49 0906 	adc.w	r9, r9, r6
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003264:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003268:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800326c:	4688      	mov	r8, r1
 800326e:	4691      	mov	r9, r2
 8003270:	eb18 0005 	adds.w	r0, r8, r5
 8003274:	eb49 0106 	adc.w	r1, r9, r6
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	461d      	mov	r5, r3
 800327e:	f04f 0600 	mov.w	r6, #0
 8003282:	196b      	adds	r3, r5, r5
 8003284:	eb46 0406 	adc.w	r4, r6, r6
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	f7fd f810 	bl	80002b0 <__aeabi_uldivmod>
 8003290:	4603      	mov	r3, r0
 8003292:	460c      	mov	r4, r1
 8003294:	461a      	mov	r2, r3
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <UART_SetConfig+0x384>)
 8003298:	fba3 2302 	umull	r2, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	461d      	mov	r5, r3
 80032a6:	f04f 0600 	mov.w	r6, #0
 80032aa:	46a9      	mov	r9, r5
 80032ac:	46b2      	mov	sl, r6
 80032ae:	eb19 0309 	adds.w	r3, r9, r9
 80032b2:	eb4a 040a 	adc.w	r4, sl, sl
 80032b6:	4699      	mov	r9, r3
 80032b8:	46a2      	mov	sl, r4
 80032ba:	eb19 0905 	adds.w	r9, r9, r5
 80032be:	eb4a 0a06 	adc.w	sl, sl, r6
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032d6:	4689      	mov	r9, r1
 80032d8:	4692      	mov	sl, r2
 80032da:	eb19 0005 	adds.w	r0, r9, r5
 80032de:	eb4a 0106 	adc.w	r1, sl, r6
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	461d      	mov	r5, r3
 80032e8:	f04f 0600 	mov.w	r6, #0
 80032ec:	196b      	adds	r3, r5, r5
 80032ee:	eb46 0406 	adc.w	r4, r6, r6
 80032f2:	461a      	mov	r2, r3
 80032f4:	4623      	mov	r3, r4
 80032f6:	f7fc ffdb 	bl	80002b0 <__aeabi_uldivmod>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	461a      	mov	r2, r3
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <UART_SetConfig+0x384>)
 8003302:	fba3 1302 	umull	r1, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	3332      	adds	r3, #50	; 0x32
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <UART_SetConfig+0x384>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003322:	4498      	add	r8, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	461d      	mov	r5, r3
 8003328:	f04f 0600 	mov.w	r6, #0
 800332c:	46a9      	mov	r9, r5
 800332e:	46b2      	mov	sl, r6
 8003330:	eb19 0309 	adds.w	r3, r9, r9
 8003334:	eb4a 040a 	adc.w	r4, sl, sl
 8003338:	4699      	mov	r9, r3
 800333a:	46a2      	mov	sl, r4
 800333c:	eb19 0905 	adds.w	r9, r9, r5
 8003340:	eb4a 0a06 	adc.w	sl, sl, r6
 8003344:	f04f 0100 	mov.w	r1, #0
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003358:	4689      	mov	r9, r1
 800335a:	4692      	mov	sl, r2
 800335c:	eb19 0005 	adds.w	r0, r9, r5
 8003360:	eb4a 0106 	adc.w	r1, sl, r6
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	461d      	mov	r5, r3
 800336a:	f04f 0600 	mov.w	r6, #0
 800336e:	196b      	adds	r3, r5, r5
 8003370:	eb46 0406 	adc.w	r4, r6, r6
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	f7fc ff9a 	bl	80002b0 <__aeabi_uldivmod>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	461a      	mov	r2, r3
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <UART_SetConfig+0x384>)
 8003384:	fba3 1302 	umull	r1, r3, r3, r2
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	2164      	movs	r1, #100	; 0x64
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3332      	adds	r3, #50	; 0x32
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <UART_SetConfig+0x384>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	f003 0207 	and.w	r2, r3, #7
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4442      	add	r2, r8
 80033a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80033aa:	e1b2      	b.n	8003712 <UART_SetConfig+0x6e2>
 80033ac:	40011000 	.word	0x40011000
 80033b0:	40011400 	.word	0x40011400
 80033b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4ad7      	ldr	r2, [pc, #860]	; (800371c <UART_SetConfig+0x6ec>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d005      	beq.n	80033ce <UART_SetConfig+0x39e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4ad6      	ldr	r2, [pc, #856]	; (8003720 <UART_SetConfig+0x6f0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	f040 80d1 	bne.w	8003570 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80033ce:	f7fe fcf1 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 80033d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	469a      	mov	sl, r3
 80033d8:	f04f 0b00 	mov.w	fp, #0
 80033dc:	46d0      	mov	r8, sl
 80033de:	46d9      	mov	r9, fp
 80033e0:	eb18 0308 	adds.w	r3, r8, r8
 80033e4:	eb49 0409 	adc.w	r4, r9, r9
 80033e8:	4698      	mov	r8, r3
 80033ea:	46a1      	mov	r9, r4
 80033ec:	eb18 080a 	adds.w	r8, r8, sl
 80033f0:	eb49 090b 	adc.w	r9, r9, fp
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003400:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003404:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003408:	4688      	mov	r8, r1
 800340a:	4691      	mov	r9, r2
 800340c:	eb1a 0508 	adds.w	r5, sl, r8
 8003410:	eb4b 0609 	adc.w	r6, fp, r9
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	0094      	lsls	r4, r2, #2
 8003428:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800342c:	008b      	lsls	r3, r1, #2
 800342e:	461a      	mov	r2, r3
 8003430:	4623      	mov	r3, r4
 8003432:	4628      	mov	r0, r5
 8003434:	4631      	mov	r1, r6
 8003436:	f7fc ff3b 	bl	80002b0 <__aeabi_uldivmod>
 800343a:	4603      	mov	r3, r0
 800343c:	460c      	mov	r4, r1
 800343e:	461a      	mov	r2, r3
 8003440:	4bb8      	ldr	r3, [pc, #736]	; (8003724 <UART_SetConfig+0x6f4>)
 8003442:	fba3 2302 	umull	r2, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	469b      	mov	fp, r3
 8003450:	f04f 0c00 	mov.w	ip, #0
 8003454:	46d9      	mov	r9, fp
 8003456:	46e2      	mov	sl, ip
 8003458:	eb19 0309 	adds.w	r3, r9, r9
 800345c:	eb4a 040a 	adc.w	r4, sl, sl
 8003460:	4699      	mov	r9, r3
 8003462:	46a2      	mov	sl, r4
 8003464:	eb19 090b 	adds.w	r9, r9, fp
 8003468:	eb4a 0a0c 	adc.w	sl, sl, ip
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003478:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800347c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003480:	4689      	mov	r9, r1
 8003482:	4692      	mov	sl, r2
 8003484:	eb1b 0509 	adds.w	r5, fp, r9
 8003488:	eb4c 060a 	adc.w	r6, ip, sl
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4619      	mov	r1, r3
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	f04f 0400 	mov.w	r4, #0
 800349e:	0094      	lsls	r4, r2, #2
 80034a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034a4:	008b      	lsls	r3, r1, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	4623      	mov	r3, r4
 80034aa:	4628      	mov	r0, r5
 80034ac:	4631      	mov	r1, r6
 80034ae:	f7fc feff 	bl	80002b0 <__aeabi_uldivmod>
 80034b2:	4603      	mov	r3, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b9a      	ldr	r3, [pc, #616]	; (8003724 <UART_SetConfig+0x6f4>)
 80034ba:	fba3 1302 	umull	r1, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2164      	movs	r1, #100	; 0x64
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	3332      	adds	r3, #50	; 0x32
 80034cc:	4a95      	ldr	r2, [pc, #596]	; (8003724 <UART_SetConfig+0x6f4>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	4498      	add	r8, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	469b      	mov	fp, r3
 80034de:	f04f 0c00 	mov.w	ip, #0
 80034e2:	46d9      	mov	r9, fp
 80034e4:	46e2      	mov	sl, ip
 80034e6:	eb19 0309 	adds.w	r3, r9, r9
 80034ea:	eb4a 040a 	adc.w	r4, sl, sl
 80034ee:	4699      	mov	r9, r3
 80034f0:	46a2      	mov	sl, r4
 80034f2:	eb19 090b 	adds.w	r9, r9, fp
 80034f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003506:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800350a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800350e:	4689      	mov	r9, r1
 8003510:	4692      	mov	sl, r2
 8003512:	eb1b 0509 	adds.w	r5, fp, r9
 8003516:	eb4c 060a 	adc.w	r6, ip, sl
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4619      	mov	r1, r3
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	0094      	lsls	r4, r2, #2
 800352e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003532:	008b      	lsls	r3, r1, #2
 8003534:	461a      	mov	r2, r3
 8003536:	4623      	mov	r3, r4
 8003538:	4628      	mov	r0, r5
 800353a:	4631      	mov	r1, r6
 800353c:	f7fc feb8 	bl	80002b0 <__aeabi_uldivmod>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	461a      	mov	r2, r3
 8003546:	4b77      	ldr	r3, [pc, #476]	; (8003724 <UART_SetConfig+0x6f4>)
 8003548:	fba3 1302 	umull	r1, r3, r3, r2
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	2164      	movs	r1, #100	; 0x64
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	3332      	adds	r3, #50	; 0x32
 800355a:	4a72      	ldr	r2, [pc, #456]	; (8003724 <UART_SetConfig+0x6f4>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4442      	add	r2, r8
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	e0d0      	b.n	8003712 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003570:	f7fe fc0c 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8003574:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	469a      	mov	sl, r3
 800357a:	f04f 0b00 	mov.w	fp, #0
 800357e:	46d0      	mov	r8, sl
 8003580:	46d9      	mov	r9, fp
 8003582:	eb18 0308 	adds.w	r3, r8, r8
 8003586:	eb49 0409 	adc.w	r4, r9, r9
 800358a:	4698      	mov	r8, r3
 800358c:	46a1      	mov	r9, r4
 800358e:	eb18 080a 	adds.w	r8, r8, sl
 8003592:	eb49 090b 	adc.w	r9, r9, fp
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035aa:	4688      	mov	r8, r1
 80035ac:	4691      	mov	r9, r2
 80035ae:	eb1a 0508 	adds.w	r5, sl, r8
 80035b2:	eb4b 0609 	adc.w	r6, fp, r9
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	0094      	lsls	r4, r2, #2
 80035ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	4628      	mov	r0, r5
 80035d6:	4631      	mov	r1, r6
 80035d8:	f7fc fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b50      	ldr	r3, [pc, #320]	; (8003724 <UART_SetConfig+0x6f4>)
 80035e4:	fba3 2302 	umull	r2, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	469b      	mov	fp, r3
 80035f2:	f04f 0c00 	mov.w	ip, #0
 80035f6:	46d9      	mov	r9, fp
 80035f8:	46e2      	mov	sl, ip
 80035fa:	eb19 0309 	adds.w	r3, r9, r9
 80035fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003602:	4699      	mov	r9, r3
 8003604:	46a2      	mov	sl, r4
 8003606:	eb19 090b 	adds.w	r9, r9, fp
 800360a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800361e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003622:	4689      	mov	r9, r1
 8003624:	4692      	mov	sl, r2
 8003626:	eb1b 0509 	adds.w	r5, fp, r9
 800362a:	eb4c 060a 	adc.w	r6, ip, sl
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4619      	mov	r1, r3
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	0094      	lsls	r4, r2, #2
 8003642:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003646:	008b      	lsls	r3, r1, #2
 8003648:	461a      	mov	r2, r3
 800364a:	4623      	mov	r3, r4
 800364c:	4628      	mov	r0, r5
 800364e:	4631      	mov	r1, r6
 8003650:	f7fc fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8003654:	4603      	mov	r3, r0
 8003656:	460c      	mov	r4, r1
 8003658:	461a      	mov	r2, r3
 800365a:	4b32      	ldr	r3, [pc, #200]	; (8003724 <UART_SetConfig+0x6f4>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	; 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	3332      	adds	r3, #50	; 0x32
 800366e:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <UART_SetConfig+0x6f4>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367a:	4498      	add	r8, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	469b      	mov	fp, r3
 8003680:	f04f 0c00 	mov.w	ip, #0
 8003684:	46d9      	mov	r9, fp
 8003686:	46e2      	mov	sl, ip
 8003688:	eb19 0309 	adds.w	r3, r9, r9
 800368c:	eb4a 040a 	adc.w	r4, sl, sl
 8003690:	4699      	mov	r9, r3
 8003692:	46a2      	mov	sl, r4
 8003694:	eb19 090b 	adds.w	r9, r9, fp
 8003698:	eb4a 0a0c 	adc.w	sl, sl, ip
 800369c:	f04f 0100 	mov.w	r1, #0
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b0:	4689      	mov	r9, r1
 80036b2:	4692      	mov	sl, r2
 80036b4:	eb1b 0509 	adds.w	r5, fp, r9
 80036b8:	eb4c 060a 	adc.w	r6, ip, sl
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0094      	lsls	r4, r2, #2
 80036d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d4:	008b      	lsls	r3, r1, #2
 80036d6:	461a      	mov	r2, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	4628      	mov	r0, r5
 80036dc:	4631      	mov	r1, r6
 80036de:	f7fc fde7 	bl	80002b0 <__aeabi_uldivmod>
 80036e2:	4603      	mov	r3, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <UART_SetConfig+0x6f4>)
 80036ea:	fba3 1302 	umull	r1, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2164      	movs	r1, #100	; 0x64
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	3332      	adds	r3, #50	; 0x32
 80036fc:	4a09      	ldr	r2, [pc, #36]	; (8003724 <UART_SetConfig+0x6f4>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4442      	add	r2, r8
 800370e:	609a      	str	r2, [r3, #8]
}
 8003710:	e7ff      	b.n	8003712 <UART_SetConfig+0x6e2>
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371c:	40011000 	.word	0x40011000
 8003720:	40011400 	.word	0x40011400
 8003724:	51eb851f 	.word	0x51eb851f

08003728 <__errno>:
 8003728:	4b01      	ldr	r3, [pc, #4]	; (8003730 <__errno+0x8>)
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	2000000c 	.word	0x2000000c

08003734 <__libc_init_array>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	4e0d      	ldr	r6, [pc, #52]	; (800376c <__libc_init_array+0x38>)
 8003738:	4c0d      	ldr	r4, [pc, #52]	; (8003770 <__libc_init_array+0x3c>)
 800373a:	1ba4      	subs	r4, r4, r6
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	2500      	movs	r5, #0
 8003740:	42a5      	cmp	r5, r4
 8003742:	d109      	bne.n	8003758 <__libc_init_array+0x24>
 8003744:	4e0b      	ldr	r6, [pc, #44]	; (8003774 <__libc_init_array+0x40>)
 8003746:	4c0c      	ldr	r4, [pc, #48]	; (8003778 <__libc_init_array+0x44>)
 8003748:	f000 ff68 	bl	800461c <_init>
 800374c:	1ba4      	subs	r4, r4, r6
 800374e:	10a4      	asrs	r4, r4, #2
 8003750:	2500      	movs	r5, #0
 8003752:	42a5      	cmp	r5, r4
 8003754:	d105      	bne.n	8003762 <__libc_init_array+0x2e>
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800375c:	4798      	blx	r3
 800375e:	3501      	adds	r5, #1
 8003760:	e7ee      	b.n	8003740 <__libc_init_array+0xc>
 8003762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003766:	4798      	blx	r3
 8003768:	3501      	adds	r5, #1
 800376a:	e7f2      	b.n	8003752 <__libc_init_array+0x1e>
 800376c:	08004724 	.word	0x08004724
 8003770:	08004724 	.word	0x08004724
 8003774:	08004724 	.word	0x08004724
 8003778:	08004728 	.word	0x08004728

0800377c <memset>:
 800377c:	4402      	add	r2, r0
 800377e:	4603      	mov	r3, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	d100      	bne.n	8003786 <memset+0xa>
 8003784:	4770      	bx	lr
 8003786:	f803 1b01 	strb.w	r1, [r3], #1
 800378a:	e7f9      	b.n	8003780 <memset+0x4>

0800378c <iprintf>:
 800378c:	b40f      	push	{r0, r1, r2, r3}
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <iprintf+0x2c>)
 8003790:	b513      	push	{r0, r1, r4, lr}
 8003792:	681c      	ldr	r4, [r3, #0]
 8003794:	b124      	cbz	r4, 80037a0 <iprintf+0x14>
 8003796:	69a3      	ldr	r3, [r4, #24]
 8003798:	b913      	cbnz	r3, 80037a0 <iprintf+0x14>
 800379a:	4620      	mov	r0, r4
 800379c:	f000 fa22 	bl	8003be4 <__sinit>
 80037a0:	ab05      	add	r3, sp, #20
 80037a2:	9a04      	ldr	r2, [sp, #16]
 80037a4:	68a1      	ldr	r1, [r4, #8]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	4620      	mov	r0, r4
 80037aa:	f000 fbdb 	bl	8003f64 <_vfiprintf_r>
 80037ae:	b002      	add	sp, #8
 80037b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b4:	b004      	add	sp, #16
 80037b6:	4770      	bx	lr
 80037b8:	2000000c 	.word	0x2000000c

080037bc <_puts_r>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	460e      	mov	r6, r1
 80037c0:	4605      	mov	r5, r0
 80037c2:	b118      	cbz	r0, 80037cc <_puts_r+0x10>
 80037c4:	6983      	ldr	r3, [r0, #24]
 80037c6:	b90b      	cbnz	r3, 80037cc <_puts_r+0x10>
 80037c8:	f000 fa0c 	bl	8003be4 <__sinit>
 80037cc:	69ab      	ldr	r3, [r5, #24]
 80037ce:	68ac      	ldr	r4, [r5, #8]
 80037d0:	b913      	cbnz	r3, 80037d8 <_puts_r+0x1c>
 80037d2:	4628      	mov	r0, r5
 80037d4:	f000 fa06 	bl	8003be4 <__sinit>
 80037d8:	4b23      	ldr	r3, [pc, #140]	; (8003868 <_puts_r+0xac>)
 80037da:	429c      	cmp	r4, r3
 80037dc:	d117      	bne.n	800380e <_puts_r+0x52>
 80037de:	686c      	ldr	r4, [r5, #4]
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	071b      	lsls	r3, r3, #28
 80037e4:	d51d      	bpl.n	8003822 <_puts_r+0x66>
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	b1db      	cbz	r3, 8003822 <_puts_r+0x66>
 80037ea:	3e01      	subs	r6, #1
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037f2:	3b01      	subs	r3, #1
 80037f4:	60a3      	str	r3, [r4, #8]
 80037f6:	b9e9      	cbnz	r1, 8003834 <_puts_r+0x78>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	da2e      	bge.n	800385a <_puts_r+0x9e>
 80037fc:	4622      	mov	r2, r4
 80037fe:	210a      	movs	r1, #10
 8003800:	4628      	mov	r0, r5
 8003802:	f000 f83f 	bl	8003884 <__swbuf_r>
 8003806:	3001      	adds	r0, #1
 8003808:	d011      	beq.n	800382e <_puts_r+0x72>
 800380a:	200a      	movs	r0, #10
 800380c:	e011      	b.n	8003832 <_puts_r+0x76>
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <_puts_r+0xb0>)
 8003810:	429c      	cmp	r4, r3
 8003812:	d101      	bne.n	8003818 <_puts_r+0x5c>
 8003814:	68ac      	ldr	r4, [r5, #8]
 8003816:	e7e3      	b.n	80037e0 <_puts_r+0x24>
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <_puts_r+0xb4>)
 800381a:	429c      	cmp	r4, r3
 800381c:	bf08      	it	eq
 800381e:	68ec      	ldreq	r4, [r5, #12]
 8003820:	e7de      	b.n	80037e0 <_puts_r+0x24>
 8003822:	4621      	mov	r1, r4
 8003824:	4628      	mov	r0, r5
 8003826:	f000 f87f 	bl	8003928 <__swsetup_r>
 800382a:	2800      	cmp	r0, #0
 800382c:	d0dd      	beq.n	80037ea <_puts_r+0x2e>
 800382e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	2b00      	cmp	r3, #0
 8003836:	da04      	bge.n	8003842 <_puts_r+0x86>
 8003838:	69a2      	ldr	r2, [r4, #24]
 800383a:	429a      	cmp	r2, r3
 800383c:	dc06      	bgt.n	800384c <_puts_r+0x90>
 800383e:	290a      	cmp	r1, #10
 8003840:	d004      	beq.n	800384c <_puts_r+0x90>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	6022      	str	r2, [r4, #0]
 8003848:	7019      	strb	r1, [r3, #0]
 800384a:	e7cf      	b.n	80037ec <_puts_r+0x30>
 800384c:	4622      	mov	r2, r4
 800384e:	4628      	mov	r0, r5
 8003850:	f000 f818 	bl	8003884 <__swbuf_r>
 8003854:	3001      	adds	r0, #1
 8003856:	d1c9      	bne.n	80037ec <_puts_r+0x30>
 8003858:	e7e9      	b.n	800382e <_puts_r+0x72>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	200a      	movs	r0, #10
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	6022      	str	r2, [r4, #0]
 8003862:	7018      	strb	r0, [r3, #0]
 8003864:	e7e5      	b.n	8003832 <_puts_r+0x76>
 8003866:	bf00      	nop
 8003868:	080046a8 	.word	0x080046a8
 800386c:	080046c8 	.word	0x080046c8
 8003870:	08004688 	.word	0x08004688

08003874 <puts>:
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <puts+0xc>)
 8003876:	4601      	mov	r1, r0
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	f7ff bf9f 	b.w	80037bc <_puts_r>
 800387e:	bf00      	nop
 8003880:	2000000c 	.word	0x2000000c

08003884 <__swbuf_r>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	460e      	mov	r6, r1
 8003888:	4614      	mov	r4, r2
 800388a:	4605      	mov	r5, r0
 800388c:	b118      	cbz	r0, 8003896 <__swbuf_r+0x12>
 800388e:	6983      	ldr	r3, [r0, #24]
 8003890:	b90b      	cbnz	r3, 8003896 <__swbuf_r+0x12>
 8003892:	f000 f9a7 	bl	8003be4 <__sinit>
 8003896:	4b21      	ldr	r3, [pc, #132]	; (800391c <__swbuf_r+0x98>)
 8003898:	429c      	cmp	r4, r3
 800389a:	d12a      	bne.n	80038f2 <__swbuf_r+0x6e>
 800389c:	686c      	ldr	r4, [r5, #4]
 800389e:	69a3      	ldr	r3, [r4, #24]
 80038a0:	60a3      	str	r3, [r4, #8]
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	071a      	lsls	r2, r3, #28
 80038a6:	d52e      	bpl.n	8003906 <__swbuf_r+0x82>
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	b363      	cbz	r3, 8003906 <__swbuf_r+0x82>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	1ac0      	subs	r0, r0, r3
 80038b2:	6963      	ldr	r3, [r4, #20]
 80038b4:	b2f6      	uxtb	r6, r6
 80038b6:	4283      	cmp	r3, r0
 80038b8:	4637      	mov	r7, r6
 80038ba:	dc04      	bgt.n	80038c6 <__swbuf_r+0x42>
 80038bc:	4621      	mov	r1, r4
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 f926 	bl	8003b10 <_fflush_r>
 80038c4:	bb28      	cbnz	r0, 8003912 <__swbuf_r+0x8e>
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	60a3      	str	r3, [r4, #8]
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	6022      	str	r2, [r4, #0]
 80038d2:	701e      	strb	r6, [r3, #0]
 80038d4:	6963      	ldr	r3, [r4, #20]
 80038d6:	3001      	adds	r0, #1
 80038d8:	4283      	cmp	r3, r0
 80038da:	d004      	beq.n	80038e6 <__swbuf_r+0x62>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	07db      	lsls	r3, r3, #31
 80038e0:	d519      	bpl.n	8003916 <__swbuf_r+0x92>
 80038e2:	2e0a      	cmp	r6, #10
 80038e4:	d117      	bne.n	8003916 <__swbuf_r+0x92>
 80038e6:	4621      	mov	r1, r4
 80038e8:	4628      	mov	r0, r5
 80038ea:	f000 f911 	bl	8003b10 <_fflush_r>
 80038ee:	b190      	cbz	r0, 8003916 <__swbuf_r+0x92>
 80038f0:	e00f      	b.n	8003912 <__swbuf_r+0x8e>
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <__swbuf_r+0x9c>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d101      	bne.n	80038fc <__swbuf_r+0x78>
 80038f8:	68ac      	ldr	r4, [r5, #8]
 80038fa:	e7d0      	b.n	800389e <__swbuf_r+0x1a>
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <__swbuf_r+0xa0>)
 80038fe:	429c      	cmp	r4, r3
 8003900:	bf08      	it	eq
 8003902:	68ec      	ldreq	r4, [r5, #12]
 8003904:	e7cb      	b.n	800389e <__swbuf_r+0x1a>
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f80d 	bl	8003928 <__swsetup_r>
 800390e:	2800      	cmp	r0, #0
 8003910:	d0cc      	beq.n	80038ac <__swbuf_r+0x28>
 8003912:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003916:	4638      	mov	r0, r7
 8003918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800391a:	bf00      	nop
 800391c:	080046a8 	.word	0x080046a8
 8003920:	080046c8 	.word	0x080046c8
 8003924:	08004688 	.word	0x08004688

08003928 <__swsetup_r>:
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <__swsetup_r+0xcc>)
 800392a:	b570      	push	{r4, r5, r6, lr}
 800392c:	681d      	ldr	r5, [r3, #0]
 800392e:	4606      	mov	r6, r0
 8003930:	460c      	mov	r4, r1
 8003932:	b125      	cbz	r5, 800393e <__swsetup_r+0x16>
 8003934:	69ab      	ldr	r3, [r5, #24]
 8003936:	b913      	cbnz	r3, 800393e <__swsetup_r+0x16>
 8003938:	4628      	mov	r0, r5
 800393a:	f000 f953 	bl	8003be4 <__sinit>
 800393e:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <__swsetup_r+0xd0>)
 8003940:	429c      	cmp	r4, r3
 8003942:	d10f      	bne.n	8003964 <__swsetup_r+0x3c>
 8003944:	686c      	ldr	r4, [r5, #4]
 8003946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800394a:	b29a      	uxth	r2, r3
 800394c:	0715      	lsls	r5, r2, #28
 800394e:	d42c      	bmi.n	80039aa <__swsetup_r+0x82>
 8003950:	06d0      	lsls	r0, r2, #27
 8003952:	d411      	bmi.n	8003978 <__swsetup_r+0x50>
 8003954:	2209      	movs	r2, #9
 8003956:	6032      	str	r2, [r6, #0]
 8003958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003962:	e03e      	b.n	80039e2 <__swsetup_r+0xba>
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <__swsetup_r+0xd4>)
 8003966:	429c      	cmp	r4, r3
 8003968:	d101      	bne.n	800396e <__swsetup_r+0x46>
 800396a:	68ac      	ldr	r4, [r5, #8]
 800396c:	e7eb      	b.n	8003946 <__swsetup_r+0x1e>
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <__swsetup_r+0xd8>)
 8003970:	429c      	cmp	r4, r3
 8003972:	bf08      	it	eq
 8003974:	68ec      	ldreq	r4, [r5, #12]
 8003976:	e7e6      	b.n	8003946 <__swsetup_r+0x1e>
 8003978:	0751      	lsls	r1, r2, #29
 800397a:	d512      	bpl.n	80039a2 <__swsetup_r+0x7a>
 800397c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800397e:	b141      	cbz	r1, 8003992 <__swsetup_r+0x6a>
 8003980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003984:	4299      	cmp	r1, r3
 8003986:	d002      	beq.n	800398e <__swsetup_r+0x66>
 8003988:	4630      	mov	r0, r6
 800398a:	f000 fa19 	bl	8003dc0 <_free_r>
 800398e:	2300      	movs	r3, #0
 8003990:	6363      	str	r3, [r4, #52]	; 0x34
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	2300      	movs	r3, #0
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	b94b      	cbnz	r3, 80039c2 <__swsetup_r+0x9a>
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b8:	d003      	beq.n	80039c2 <__swsetup_r+0x9a>
 80039ba:	4621      	mov	r1, r4
 80039bc:	4630      	mov	r0, r6
 80039be:	f000 f9bf 	bl	8003d40 <__smakebuf_r>
 80039c2:	89a2      	ldrh	r2, [r4, #12]
 80039c4:	f012 0301 	ands.w	r3, r2, #1
 80039c8:	d00c      	beq.n	80039e4 <__swsetup_r+0xbc>
 80039ca:	2300      	movs	r3, #0
 80039cc:	60a3      	str	r3, [r4, #8]
 80039ce:	6963      	ldr	r3, [r4, #20]
 80039d0:	425b      	negs	r3, r3
 80039d2:	61a3      	str	r3, [r4, #24]
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	b953      	cbnz	r3, 80039ee <__swsetup_r+0xc6>
 80039d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80039e0:	d1ba      	bne.n	8003958 <__swsetup_r+0x30>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	0792      	lsls	r2, r2, #30
 80039e6:	bf58      	it	pl
 80039e8:	6963      	ldrpl	r3, [r4, #20]
 80039ea:	60a3      	str	r3, [r4, #8]
 80039ec:	e7f2      	b.n	80039d4 <__swsetup_r+0xac>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e7f7      	b.n	80039e2 <__swsetup_r+0xba>
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	080046a8 	.word	0x080046a8
 80039fc:	080046c8 	.word	0x080046c8
 8003a00:	08004688 	.word	0x08004688

08003a04 <__sflush_r>:
 8003a04:	898a      	ldrh	r2, [r1, #12]
 8003a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	0710      	lsls	r0, r2, #28
 8003a0e:	460c      	mov	r4, r1
 8003a10:	d458      	bmi.n	8003ac4 <__sflush_r+0xc0>
 8003a12:	684b      	ldr	r3, [r1, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	dc05      	bgt.n	8003a24 <__sflush_r+0x20>
 8003a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dc02      	bgt.n	8003a24 <__sflush_r+0x20>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a26:	2e00      	cmp	r6, #0
 8003a28:	d0f9      	beq.n	8003a1e <__sflush_r+0x1a>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a30:	682f      	ldr	r7, [r5, #0]
 8003a32:	6a21      	ldr	r1, [r4, #32]
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	d032      	beq.n	8003a9e <__sflush_r+0x9a>
 8003a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	075a      	lsls	r2, r3, #29
 8003a3e:	d505      	bpl.n	8003a4c <__sflush_r+0x48>
 8003a40:	6863      	ldr	r3, [r4, #4]
 8003a42:	1ac0      	subs	r0, r0, r3
 8003a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a46:	b10b      	cbz	r3, 8003a4c <__sflush_r+0x48>
 8003a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a4a:	1ac0      	subs	r0, r0, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a52:	6a21      	ldr	r1, [r4, #32]
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b0      	blx	r6
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	d106      	bne.n	8003a6c <__sflush_r+0x68>
 8003a5e:	6829      	ldr	r1, [r5, #0]
 8003a60:	291d      	cmp	r1, #29
 8003a62:	d848      	bhi.n	8003af6 <__sflush_r+0xf2>
 8003a64:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <__sflush_r+0x108>)
 8003a66:	40ca      	lsrs	r2, r1
 8003a68:	07d6      	lsls	r6, r2, #31
 8003a6a:	d544      	bpl.n	8003af6 <__sflush_r+0xf2>
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	6062      	str	r2, [r4, #4]
 8003a70:	04d9      	lsls	r1, r3, #19
 8003a72:	6922      	ldr	r2, [r4, #16]
 8003a74:	6022      	str	r2, [r4, #0]
 8003a76:	d504      	bpl.n	8003a82 <__sflush_r+0x7e>
 8003a78:	1c42      	adds	r2, r0, #1
 8003a7a:	d101      	bne.n	8003a80 <__sflush_r+0x7c>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b903      	cbnz	r3, 8003a82 <__sflush_r+0x7e>
 8003a80:	6560      	str	r0, [r4, #84]	; 0x54
 8003a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a84:	602f      	str	r7, [r5, #0]
 8003a86:	2900      	cmp	r1, #0
 8003a88:	d0c9      	beq.n	8003a1e <__sflush_r+0x1a>
 8003a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a8e:	4299      	cmp	r1, r3
 8003a90:	d002      	beq.n	8003a98 <__sflush_r+0x94>
 8003a92:	4628      	mov	r0, r5
 8003a94:	f000 f994 	bl	8003dc0 <_free_r>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a9c:	e7c0      	b.n	8003a20 <__sflush_r+0x1c>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b0      	blx	r6
 8003aa4:	1c41      	adds	r1, r0, #1
 8003aa6:	d1c8      	bne.n	8003a3a <__sflush_r+0x36>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0c5      	beq.n	8003a3a <__sflush_r+0x36>
 8003aae:	2b1d      	cmp	r3, #29
 8003ab0:	d001      	beq.n	8003ab6 <__sflush_r+0xb2>
 8003ab2:	2b16      	cmp	r3, #22
 8003ab4:	d101      	bne.n	8003aba <__sflush_r+0xb6>
 8003ab6:	602f      	str	r7, [r5, #0]
 8003ab8:	e7b1      	b.n	8003a1e <__sflush_r+0x1a>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	e7ad      	b.n	8003a20 <__sflush_r+0x1c>
 8003ac4:	690f      	ldr	r7, [r1, #16]
 8003ac6:	2f00      	cmp	r7, #0
 8003ac8:	d0a9      	beq.n	8003a1e <__sflush_r+0x1a>
 8003aca:	0793      	lsls	r3, r2, #30
 8003acc:	680e      	ldr	r6, [r1, #0]
 8003ace:	bf08      	it	eq
 8003ad0:	694b      	ldreq	r3, [r1, #20]
 8003ad2:	600f      	str	r7, [r1, #0]
 8003ad4:	bf18      	it	ne
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	eba6 0807 	sub.w	r8, r6, r7
 8003adc:	608b      	str	r3, [r1, #8]
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	dd9c      	ble.n	8003a1e <__sflush_r+0x1a>
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	463a      	mov	r2, r7
 8003ae8:	6a21      	ldr	r1, [r4, #32]
 8003aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003aec:	4628      	mov	r0, r5
 8003aee:	47b0      	blx	r6
 8003af0:	2800      	cmp	r0, #0
 8003af2:	dc06      	bgt.n	8003b02 <__sflush_r+0xfe>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b00:	e78e      	b.n	8003a20 <__sflush_r+0x1c>
 8003b02:	4407      	add	r7, r0
 8003b04:	eba8 0800 	sub.w	r8, r8, r0
 8003b08:	e7e9      	b.n	8003ade <__sflush_r+0xda>
 8003b0a:	bf00      	nop
 8003b0c:	20400001 	.word	0x20400001

08003b10 <_fflush_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	690b      	ldr	r3, [r1, #16]
 8003b14:	4605      	mov	r5, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	b1db      	cbz	r3, 8003b52 <_fflush_r+0x42>
 8003b1a:	b118      	cbz	r0, 8003b24 <_fflush_r+0x14>
 8003b1c:	6983      	ldr	r3, [r0, #24]
 8003b1e:	b90b      	cbnz	r3, 8003b24 <_fflush_r+0x14>
 8003b20:	f000 f860 	bl	8003be4 <__sinit>
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <_fflush_r+0x48>)
 8003b26:	429c      	cmp	r4, r3
 8003b28:	d109      	bne.n	8003b3e <_fflush_r+0x2e>
 8003b2a:	686c      	ldr	r4, [r5, #4]
 8003b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b30:	b17b      	cbz	r3, 8003b52 <_fflush_r+0x42>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b3a:	f7ff bf63 	b.w	8003a04 <__sflush_r>
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <_fflush_r+0x4c>)
 8003b40:	429c      	cmp	r4, r3
 8003b42:	d101      	bne.n	8003b48 <_fflush_r+0x38>
 8003b44:	68ac      	ldr	r4, [r5, #8]
 8003b46:	e7f1      	b.n	8003b2c <_fflush_r+0x1c>
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <_fflush_r+0x50>)
 8003b4a:	429c      	cmp	r4, r3
 8003b4c:	bf08      	it	eq
 8003b4e:	68ec      	ldreq	r4, [r5, #12]
 8003b50:	e7ec      	b.n	8003b2c <_fflush_r+0x1c>
 8003b52:	2000      	movs	r0, #0
 8003b54:	bd38      	pop	{r3, r4, r5, pc}
 8003b56:	bf00      	nop
 8003b58:	080046a8 	.word	0x080046a8
 8003b5c:	080046c8 	.word	0x080046c8
 8003b60:	08004688 	.word	0x08004688

08003b64 <std>:
 8003b64:	2300      	movs	r3, #0
 8003b66:	b510      	push	{r4, lr}
 8003b68:	4604      	mov	r4, r0
 8003b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b6e:	6083      	str	r3, [r0, #8]
 8003b70:	8181      	strh	r1, [r0, #12]
 8003b72:	6643      	str	r3, [r0, #100]	; 0x64
 8003b74:	81c2      	strh	r2, [r0, #14]
 8003b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b7a:	6183      	str	r3, [r0, #24]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	2208      	movs	r2, #8
 8003b80:	305c      	adds	r0, #92	; 0x5c
 8003b82:	f7ff fdfb 	bl	800377c <memset>
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <std+0x38>)
 8003b88:	6263      	str	r3, [r4, #36]	; 0x24
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <std+0x3c>)
 8003b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <std+0x40>)
 8003b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <std+0x44>)
 8003b94:	6224      	str	r4, [r4, #32]
 8003b96:	6323      	str	r3, [r4, #48]	; 0x30
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	bf00      	nop
 8003b9c:	080044c1 	.word	0x080044c1
 8003ba0:	080044e3 	.word	0x080044e3
 8003ba4:	0800451b 	.word	0x0800451b
 8003ba8:	0800453f 	.word	0x0800453f

08003bac <_cleanup_r>:
 8003bac:	4901      	ldr	r1, [pc, #4]	; (8003bb4 <_cleanup_r+0x8>)
 8003bae:	f000 b885 	b.w	8003cbc <_fwalk_reent>
 8003bb2:	bf00      	nop
 8003bb4:	08003b11 	.word	0x08003b11

08003bb8 <__sfmoreglue>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	1e4a      	subs	r2, r1, #1
 8003bbc:	2568      	movs	r5, #104	; 0x68
 8003bbe:	4355      	muls	r5, r2
 8003bc0:	460e      	mov	r6, r1
 8003bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bc6:	f000 f949 	bl	8003e5c <_malloc_r>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	b140      	cbz	r0, 8003be0 <__sfmoreglue+0x28>
 8003bce:	2100      	movs	r1, #0
 8003bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8003bd4:	300c      	adds	r0, #12
 8003bd6:	60a0      	str	r0, [r4, #8]
 8003bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bdc:	f7ff fdce 	bl	800377c <memset>
 8003be0:	4620      	mov	r0, r4
 8003be2:	bd70      	pop	{r4, r5, r6, pc}

08003be4 <__sinit>:
 8003be4:	6983      	ldr	r3, [r0, #24]
 8003be6:	b510      	push	{r4, lr}
 8003be8:	4604      	mov	r4, r0
 8003bea:	bb33      	cbnz	r3, 8003c3a <__sinit+0x56>
 8003bec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003bf0:	6503      	str	r3, [r0, #80]	; 0x50
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <__sinit+0x58>)
 8003bf4:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <__sinit+0x5c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6282      	str	r2, [r0, #40]	; 0x28
 8003bfa:	4298      	cmp	r0, r3
 8003bfc:	bf04      	itt	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	6183      	streq	r3, [r0, #24]
 8003c02:	f000 f81f 	bl	8003c44 <__sfp>
 8003c06:	6060      	str	r0, [r4, #4]
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f000 f81b 	bl	8003c44 <__sfp>
 8003c0e:	60a0      	str	r0, [r4, #8]
 8003c10:	4620      	mov	r0, r4
 8003c12:	f000 f817 	bl	8003c44 <__sfp>
 8003c16:	2200      	movs	r2, #0
 8003c18:	60e0      	str	r0, [r4, #12]
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	6860      	ldr	r0, [r4, #4]
 8003c1e:	f7ff ffa1 	bl	8003b64 <std>
 8003c22:	2201      	movs	r2, #1
 8003c24:	2109      	movs	r1, #9
 8003c26:	68a0      	ldr	r0, [r4, #8]
 8003c28:	f7ff ff9c 	bl	8003b64 <std>
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	2112      	movs	r1, #18
 8003c30:	68e0      	ldr	r0, [r4, #12]
 8003c32:	f7ff ff97 	bl	8003b64 <std>
 8003c36:	2301      	movs	r3, #1
 8003c38:	61a3      	str	r3, [r4, #24]
 8003c3a:	bd10      	pop	{r4, pc}
 8003c3c:	08004684 	.word	0x08004684
 8003c40:	08003bad 	.word	0x08003bad

08003c44 <__sfp>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <__sfp+0x70>)
 8003c48:	681e      	ldr	r6, [r3, #0]
 8003c4a:	69b3      	ldr	r3, [r6, #24]
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	b913      	cbnz	r3, 8003c56 <__sfp+0x12>
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff ffc7 	bl	8003be4 <__sinit>
 8003c56:	3648      	adds	r6, #72	; 0x48
 8003c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	d503      	bpl.n	8003c68 <__sfp+0x24>
 8003c60:	6833      	ldr	r3, [r6, #0]
 8003c62:	b133      	cbz	r3, 8003c72 <__sfp+0x2e>
 8003c64:	6836      	ldr	r6, [r6, #0]
 8003c66:	e7f7      	b.n	8003c58 <__sfp+0x14>
 8003c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c6c:	b16d      	cbz	r5, 8003c8a <__sfp+0x46>
 8003c6e:	3468      	adds	r4, #104	; 0x68
 8003c70:	e7f4      	b.n	8003c5c <__sfp+0x18>
 8003c72:	2104      	movs	r1, #4
 8003c74:	4638      	mov	r0, r7
 8003c76:	f7ff ff9f 	bl	8003bb8 <__sfmoreglue>
 8003c7a:	6030      	str	r0, [r6, #0]
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d1f1      	bne.n	8003c64 <__sfp+0x20>
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4604      	mov	r4, r0
 8003c86:	4620      	mov	r0, r4
 8003c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <__sfp+0x74>)
 8003c8c:	6665      	str	r5, [r4, #100]	; 0x64
 8003c8e:	e9c4 5500 	strd	r5, r5, [r4]
 8003c92:	60a5      	str	r5, [r4, #8]
 8003c94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ca4:	f7ff fd6a 	bl	800377c <memset>
 8003ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cb0:	e7e9      	b.n	8003c86 <__sfp+0x42>
 8003cb2:	bf00      	nop
 8003cb4:	08004684 	.word	0x08004684
 8003cb8:	ffff0001 	.word	0xffff0001

08003cbc <_fwalk_reent>:
 8003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	4680      	mov	r8, r0
 8003cc2:	4689      	mov	r9, r1
 8003cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cc8:	2600      	movs	r6, #0
 8003cca:	b914      	cbnz	r4, 8003cd2 <_fwalk_reent+0x16>
 8003ccc:	4630      	mov	r0, r6
 8003cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003cd6:	3f01      	subs	r7, #1
 8003cd8:	d501      	bpl.n	8003cde <_fwalk_reent+0x22>
 8003cda:	6824      	ldr	r4, [r4, #0]
 8003cdc:	e7f5      	b.n	8003cca <_fwalk_reent+0xe>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d907      	bls.n	8003cf4 <_fwalk_reent+0x38>
 8003ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	d003      	beq.n	8003cf4 <_fwalk_reent+0x38>
 8003cec:	4629      	mov	r1, r5
 8003cee:	4640      	mov	r0, r8
 8003cf0:	47c8      	blx	r9
 8003cf2:	4306      	orrs	r6, r0
 8003cf4:	3568      	adds	r5, #104	; 0x68
 8003cf6:	e7ee      	b.n	8003cd6 <_fwalk_reent+0x1a>

08003cf8 <__swhatbuf_r>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	460e      	mov	r6, r1
 8003cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d00:	2900      	cmp	r1, #0
 8003d02:	b096      	sub	sp, #88	; 0x58
 8003d04:	4614      	mov	r4, r2
 8003d06:	461d      	mov	r5, r3
 8003d08:	da07      	bge.n	8003d1a <__swhatbuf_r+0x22>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	89b3      	ldrh	r3, [r6, #12]
 8003d10:	061a      	lsls	r2, r3, #24
 8003d12:	d410      	bmi.n	8003d36 <__swhatbuf_r+0x3e>
 8003d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d18:	e00e      	b.n	8003d38 <__swhatbuf_r+0x40>
 8003d1a:	466a      	mov	r2, sp
 8003d1c:	f000 fc36 	bl	800458c <_fstat_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	dbf2      	blt.n	8003d0a <__swhatbuf_r+0x12>
 8003d24:	9a01      	ldr	r2, [sp, #4]
 8003d26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d2e:	425a      	negs	r2, r3
 8003d30:	415a      	adcs	r2, r3
 8003d32:	602a      	str	r2, [r5, #0]
 8003d34:	e7ee      	b.n	8003d14 <__swhatbuf_r+0x1c>
 8003d36:	2340      	movs	r3, #64	; 0x40
 8003d38:	2000      	movs	r0, #0
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	b016      	add	sp, #88	; 0x58
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}

08003d40 <__smakebuf_r>:
 8003d40:	898b      	ldrh	r3, [r1, #12]
 8003d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d44:	079d      	lsls	r5, r3, #30
 8003d46:	4606      	mov	r6, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	d507      	bpl.n	8003d5c <__smakebuf_r+0x1c>
 8003d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	6123      	str	r3, [r4, #16]
 8003d54:	2301      	movs	r3, #1
 8003d56:	6163      	str	r3, [r4, #20]
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	ab01      	add	r3, sp, #4
 8003d5e:	466a      	mov	r2, sp
 8003d60:	f7ff ffca 	bl	8003cf8 <__swhatbuf_r>
 8003d64:	9900      	ldr	r1, [sp, #0]
 8003d66:	4605      	mov	r5, r0
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f000 f877 	bl	8003e5c <_malloc_r>
 8003d6e:	b948      	cbnz	r0, 8003d84 <__smakebuf_r+0x44>
 8003d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d74:	059a      	lsls	r2, r3, #22
 8003d76:	d4ef      	bmi.n	8003d58 <__smakebuf_r+0x18>
 8003d78:	f023 0303 	bic.w	r3, r3, #3
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	81a3      	strh	r3, [r4, #12]
 8003d82:	e7e3      	b.n	8003d4c <__smakebuf_r+0xc>
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <__smakebuf_r+0x7c>)
 8003d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	6020      	str	r0, [r4, #0]
 8003d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d90:	81a3      	strh	r3, [r4, #12]
 8003d92:	9b00      	ldr	r3, [sp, #0]
 8003d94:	6163      	str	r3, [r4, #20]
 8003d96:	9b01      	ldr	r3, [sp, #4]
 8003d98:	6120      	str	r0, [r4, #16]
 8003d9a:	b15b      	cbz	r3, 8003db4 <__smakebuf_r+0x74>
 8003d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 fc05 	bl	80045b0 <_isatty_r>
 8003da6:	b128      	cbz	r0, 8003db4 <__smakebuf_r+0x74>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	81a3      	strh	r3, [r4, #12]
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	431d      	orrs	r5, r3
 8003db8:	81a5      	strh	r5, [r4, #12]
 8003dba:	e7cd      	b.n	8003d58 <__smakebuf_r+0x18>
 8003dbc:	08003bad 	.word	0x08003bad

08003dc0 <_free_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d045      	beq.n	8003e54 <_free_r+0x94>
 8003dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dcc:	1f0c      	subs	r4, r1, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bfb8      	it	lt
 8003dd2:	18e4      	addlt	r4, r4, r3
 8003dd4:	f000 fc0e 	bl	80045f4 <__malloc_lock>
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <_free_r+0x98>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	4610      	mov	r0, r2
 8003dde:	b933      	cbnz	r3, 8003dee <_free_r+0x2e>
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	6014      	str	r4, [r2, #0]
 8003de4:	4628      	mov	r0, r5
 8003de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dea:	f000 bc04 	b.w	80045f6 <__malloc_unlock>
 8003dee:	42a3      	cmp	r3, r4
 8003df0:	d90c      	bls.n	8003e0c <_free_r+0x4c>
 8003df2:	6821      	ldr	r1, [r4, #0]
 8003df4:	1862      	adds	r2, r4, r1
 8003df6:	4293      	cmp	r3, r2
 8003df8:	bf04      	itt	eq
 8003dfa:	681a      	ldreq	r2, [r3, #0]
 8003dfc:	685b      	ldreq	r3, [r3, #4]
 8003dfe:	6063      	str	r3, [r4, #4]
 8003e00:	bf04      	itt	eq
 8003e02:	1852      	addeq	r2, r2, r1
 8003e04:	6022      	streq	r2, [r4, #0]
 8003e06:	6004      	str	r4, [r0, #0]
 8003e08:	e7ec      	b.n	8003de4 <_free_r+0x24>
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	b10a      	cbz	r2, 8003e14 <_free_r+0x54>
 8003e10:	42a2      	cmp	r2, r4
 8003e12:	d9fa      	bls.n	8003e0a <_free_r+0x4a>
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	1858      	adds	r0, r3, r1
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d10b      	bne.n	8003e34 <_free_r+0x74>
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	4401      	add	r1, r0
 8003e20:	1858      	adds	r0, r3, r1
 8003e22:	4282      	cmp	r2, r0
 8003e24:	6019      	str	r1, [r3, #0]
 8003e26:	d1dd      	bne.n	8003de4 <_free_r+0x24>
 8003e28:	6810      	ldr	r0, [r2, #0]
 8003e2a:	6852      	ldr	r2, [r2, #4]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	4401      	add	r1, r0
 8003e30:	6019      	str	r1, [r3, #0]
 8003e32:	e7d7      	b.n	8003de4 <_free_r+0x24>
 8003e34:	d902      	bls.n	8003e3c <_free_r+0x7c>
 8003e36:	230c      	movs	r3, #12
 8003e38:	602b      	str	r3, [r5, #0]
 8003e3a:	e7d3      	b.n	8003de4 <_free_r+0x24>
 8003e3c:	6820      	ldr	r0, [r4, #0]
 8003e3e:	1821      	adds	r1, r4, r0
 8003e40:	428a      	cmp	r2, r1
 8003e42:	bf04      	itt	eq
 8003e44:	6811      	ldreq	r1, [r2, #0]
 8003e46:	6852      	ldreq	r2, [r2, #4]
 8003e48:	6062      	str	r2, [r4, #4]
 8003e4a:	bf04      	itt	eq
 8003e4c:	1809      	addeq	r1, r1, r0
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	605c      	str	r4, [r3, #4]
 8003e52:	e7c7      	b.n	8003de4 <_free_r+0x24>
 8003e54:	bd38      	pop	{r3, r4, r5, pc}
 8003e56:	bf00      	nop
 8003e58:	20000090 	.word	0x20000090

08003e5c <_malloc_r>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	1ccd      	adds	r5, r1, #3
 8003e60:	f025 0503 	bic.w	r5, r5, #3
 8003e64:	3508      	adds	r5, #8
 8003e66:	2d0c      	cmp	r5, #12
 8003e68:	bf38      	it	cc
 8003e6a:	250c      	movcc	r5, #12
 8003e6c:	2d00      	cmp	r5, #0
 8003e6e:	4606      	mov	r6, r0
 8003e70:	db01      	blt.n	8003e76 <_malloc_r+0x1a>
 8003e72:	42a9      	cmp	r1, r5
 8003e74:	d903      	bls.n	8003e7e <_malloc_r+0x22>
 8003e76:	230c      	movs	r3, #12
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	f000 fbb9 	bl	80045f4 <__malloc_lock>
 8003e82:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <_malloc_r+0xac>)
 8003e84:	6814      	ldr	r4, [r2, #0]
 8003e86:	4621      	mov	r1, r4
 8003e88:	b991      	cbnz	r1, 8003eb0 <_malloc_r+0x54>
 8003e8a:	4c20      	ldr	r4, [pc, #128]	; (8003f0c <_malloc_r+0xb0>)
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	b91b      	cbnz	r3, 8003e98 <_malloc_r+0x3c>
 8003e90:	4630      	mov	r0, r6
 8003e92:	f000 fb05 	bl	80044a0 <_sbrk_r>
 8003e96:	6020      	str	r0, [r4, #0]
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f000 fb00 	bl	80044a0 <_sbrk_r>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d124      	bne.n	8003eee <_malloc_r+0x92>
 8003ea4:	230c      	movs	r3, #12
 8003ea6:	6033      	str	r3, [r6, #0]
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 fba4 	bl	80045f6 <__malloc_unlock>
 8003eae:	e7e4      	b.n	8003e7a <_malloc_r+0x1e>
 8003eb0:	680b      	ldr	r3, [r1, #0]
 8003eb2:	1b5b      	subs	r3, r3, r5
 8003eb4:	d418      	bmi.n	8003ee8 <_malloc_r+0x8c>
 8003eb6:	2b0b      	cmp	r3, #11
 8003eb8:	d90f      	bls.n	8003eda <_malloc_r+0x7e>
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	50cd      	str	r5, [r1, r3]
 8003ebe:	18cc      	adds	r4, r1, r3
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 fb98 	bl	80045f6 <__malloc_unlock>
 8003ec6:	f104 000b 	add.w	r0, r4, #11
 8003eca:	1d23      	adds	r3, r4, #4
 8003ecc:	f020 0007 	bic.w	r0, r0, #7
 8003ed0:	1ac3      	subs	r3, r0, r3
 8003ed2:	d0d3      	beq.n	8003e7c <_malloc_r+0x20>
 8003ed4:	425a      	negs	r2, r3
 8003ed6:	50e2      	str	r2, [r4, r3]
 8003ed8:	e7d0      	b.n	8003e7c <_malloc_r+0x20>
 8003eda:	428c      	cmp	r4, r1
 8003edc:	684b      	ldr	r3, [r1, #4]
 8003ede:	bf16      	itet	ne
 8003ee0:	6063      	strne	r3, [r4, #4]
 8003ee2:	6013      	streq	r3, [r2, #0]
 8003ee4:	460c      	movne	r4, r1
 8003ee6:	e7eb      	b.n	8003ec0 <_malloc_r+0x64>
 8003ee8:	460c      	mov	r4, r1
 8003eea:	6849      	ldr	r1, [r1, #4]
 8003eec:	e7cc      	b.n	8003e88 <_malloc_r+0x2c>
 8003eee:	1cc4      	adds	r4, r0, #3
 8003ef0:	f024 0403 	bic.w	r4, r4, #3
 8003ef4:	42a0      	cmp	r0, r4
 8003ef6:	d005      	beq.n	8003f04 <_malloc_r+0xa8>
 8003ef8:	1a21      	subs	r1, r4, r0
 8003efa:	4630      	mov	r0, r6
 8003efc:	f000 fad0 	bl	80044a0 <_sbrk_r>
 8003f00:	3001      	adds	r0, #1
 8003f02:	d0cf      	beq.n	8003ea4 <_malloc_r+0x48>
 8003f04:	6025      	str	r5, [r4, #0]
 8003f06:	e7db      	b.n	8003ec0 <_malloc_r+0x64>
 8003f08:	20000090 	.word	0x20000090
 8003f0c:	20000094 	.word	0x20000094

08003f10 <__sfputc_r>:
 8003f10:	6893      	ldr	r3, [r2, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	b410      	push	{r4}
 8003f18:	6093      	str	r3, [r2, #8]
 8003f1a:	da08      	bge.n	8003f2e <__sfputc_r+0x1e>
 8003f1c:	6994      	ldr	r4, [r2, #24]
 8003f1e:	42a3      	cmp	r3, r4
 8003f20:	db01      	blt.n	8003f26 <__sfputc_r+0x16>
 8003f22:	290a      	cmp	r1, #10
 8003f24:	d103      	bne.n	8003f2e <__sfputc_r+0x1e>
 8003f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f2a:	f7ff bcab 	b.w	8003884 <__swbuf_r>
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	1c58      	adds	r0, r3, #1
 8003f32:	6010      	str	r0, [r2, #0]
 8003f34:	7019      	strb	r1, [r3, #0]
 8003f36:	4608      	mov	r0, r1
 8003f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <__sfputs_r>:
 8003f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f40:	4606      	mov	r6, r0
 8003f42:	460f      	mov	r7, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	18d5      	adds	r5, r2, r3
 8003f48:	42ac      	cmp	r4, r5
 8003f4a:	d101      	bne.n	8003f50 <__sfputs_r+0x12>
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e007      	b.n	8003f60 <__sfputs_r+0x22>
 8003f50:	463a      	mov	r2, r7
 8003f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7ff ffda 	bl	8003f10 <__sfputc_r>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d1f3      	bne.n	8003f48 <__sfputs_r+0xa>
 8003f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f64 <_vfiprintf_r>:
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	460c      	mov	r4, r1
 8003f6a:	b09d      	sub	sp, #116	; 0x74
 8003f6c:	4617      	mov	r7, r2
 8003f6e:	461d      	mov	r5, r3
 8003f70:	4606      	mov	r6, r0
 8003f72:	b118      	cbz	r0, 8003f7c <_vfiprintf_r+0x18>
 8003f74:	6983      	ldr	r3, [r0, #24]
 8003f76:	b90b      	cbnz	r3, 8003f7c <_vfiprintf_r+0x18>
 8003f78:	f7ff fe34 	bl	8003be4 <__sinit>
 8003f7c:	4b7c      	ldr	r3, [pc, #496]	; (8004170 <_vfiprintf_r+0x20c>)
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d158      	bne.n	8004034 <_vfiprintf_r+0xd0>
 8003f82:	6874      	ldr	r4, [r6, #4]
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	0718      	lsls	r0, r3, #28
 8003f88:	d55e      	bpl.n	8004048 <_vfiprintf_r+0xe4>
 8003f8a:	6923      	ldr	r3, [r4, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05b      	beq.n	8004048 <_vfiprintf_r+0xe4>
 8003f90:	2300      	movs	r3, #0
 8003f92:	9309      	str	r3, [sp, #36]	; 0x24
 8003f94:	2320      	movs	r3, #32
 8003f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f9a:	2330      	movs	r3, #48	; 0x30
 8003f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fa0:	9503      	str	r5, [sp, #12]
 8003fa2:	f04f 0b01 	mov.w	fp, #1
 8003fa6:	46b8      	mov	r8, r7
 8003fa8:	4645      	mov	r5, r8
 8003faa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fae:	b10b      	cbz	r3, 8003fb4 <_vfiprintf_r+0x50>
 8003fb0:	2b25      	cmp	r3, #37	; 0x25
 8003fb2:	d154      	bne.n	800405e <_vfiprintf_r+0xfa>
 8003fb4:	ebb8 0a07 	subs.w	sl, r8, r7
 8003fb8:	d00b      	beq.n	8003fd2 <_vfiprintf_r+0x6e>
 8003fba:	4653      	mov	r3, sl
 8003fbc:	463a      	mov	r2, r7
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f7ff ffbc 	bl	8003f3e <__sfputs_r>
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	f000 80c2 	beq.w	8004150 <_vfiprintf_r+0x1ec>
 8003fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fce:	4453      	add	r3, sl
 8003fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd2:	f898 3000 	ldrb.w	r3, [r8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80ba 	beq.w	8004150 <_vfiprintf_r+0x1ec>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	9307      	str	r3, [sp, #28]
 8003fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff0:	46a8      	mov	r8, r5
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003ff8:	485e      	ldr	r0, [pc, #376]	; (8004174 <_vfiprintf_r+0x210>)
 8003ffa:	f7fc f909 	bl	8000210 <memchr>
 8003ffe:	9b04      	ldr	r3, [sp, #16]
 8004000:	bb78      	cbnz	r0, 8004062 <_vfiprintf_r+0xfe>
 8004002:	06d9      	lsls	r1, r3, #27
 8004004:	bf44      	itt	mi
 8004006:	2220      	movmi	r2, #32
 8004008:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800400c:	071a      	lsls	r2, r3, #28
 800400e:	bf44      	itt	mi
 8004010:	222b      	movmi	r2, #43	; 0x2b
 8004012:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004016:	782a      	ldrb	r2, [r5, #0]
 8004018:	2a2a      	cmp	r2, #42	; 0x2a
 800401a:	d02a      	beq.n	8004072 <_vfiprintf_r+0x10e>
 800401c:	9a07      	ldr	r2, [sp, #28]
 800401e:	46a8      	mov	r8, r5
 8004020:	2000      	movs	r0, #0
 8004022:	250a      	movs	r5, #10
 8004024:	4641      	mov	r1, r8
 8004026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800402a:	3b30      	subs	r3, #48	; 0x30
 800402c:	2b09      	cmp	r3, #9
 800402e:	d969      	bls.n	8004104 <_vfiprintf_r+0x1a0>
 8004030:	b360      	cbz	r0, 800408c <_vfiprintf_r+0x128>
 8004032:	e024      	b.n	800407e <_vfiprintf_r+0x11a>
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <_vfiprintf_r+0x214>)
 8004036:	429c      	cmp	r4, r3
 8004038:	d101      	bne.n	800403e <_vfiprintf_r+0xda>
 800403a:	68b4      	ldr	r4, [r6, #8]
 800403c:	e7a2      	b.n	8003f84 <_vfiprintf_r+0x20>
 800403e:	4b4f      	ldr	r3, [pc, #316]	; (800417c <_vfiprintf_r+0x218>)
 8004040:	429c      	cmp	r4, r3
 8004042:	bf08      	it	eq
 8004044:	68f4      	ldreq	r4, [r6, #12]
 8004046:	e79d      	b.n	8003f84 <_vfiprintf_r+0x20>
 8004048:	4621      	mov	r1, r4
 800404a:	4630      	mov	r0, r6
 800404c:	f7ff fc6c 	bl	8003928 <__swsetup_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	d09d      	beq.n	8003f90 <_vfiprintf_r+0x2c>
 8004054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004058:	b01d      	add	sp, #116	; 0x74
 800405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405e:	46a8      	mov	r8, r5
 8004060:	e7a2      	b.n	8003fa8 <_vfiprintf_r+0x44>
 8004062:	4a44      	ldr	r2, [pc, #272]	; (8004174 <_vfiprintf_r+0x210>)
 8004064:	1a80      	subs	r0, r0, r2
 8004066:	fa0b f000 	lsl.w	r0, fp, r0
 800406a:	4318      	orrs	r0, r3
 800406c:	9004      	str	r0, [sp, #16]
 800406e:	4645      	mov	r5, r8
 8004070:	e7be      	b.n	8003ff0 <_vfiprintf_r+0x8c>
 8004072:	9a03      	ldr	r2, [sp, #12]
 8004074:	1d11      	adds	r1, r2, #4
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	9103      	str	r1, [sp, #12]
 800407a:	2a00      	cmp	r2, #0
 800407c:	db01      	blt.n	8004082 <_vfiprintf_r+0x11e>
 800407e:	9207      	str	r2, [sp, #28]
 8004080:	e004      	b.n	800408c <_vfiprintf_r+0x128>
 8004082:	4252      	negs	r2, r2
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	9207      	str	r2, [sp, #28]
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	f898 3000 	ldrb.w	r3, [r8]
 8004090:	2b2e      	cmp	r3, #46	; 0x2e
 8004092:	d10e      	bne.n	80040b2 <_vfiprintf_r+0x14e>
 8004094:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004098:	2b2a      	cmp	r3, #42	; 0x2a
 800409a:	d138      	bne.n	800410e <_vfiprintf_r+0x1aa>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	9203      	str	r2, [sp, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bfb8      	it	lt
 80040a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040ac:	f108 0802 	add.w	r8, r8, #2
 80040b0:	9305      	str	r3, [sp, #20]
 80040b2:	4d33      	ldr	r5, [pc, #204]	; (8004180 <_vfiprintf_r+0x21c>)
 80040b4:	f898 1000 	ldrb.w	r1, [r8]
 80040b8:	2203      	movs	r2, #3
 80040ba:	4628      	mov	r0, r5
 80040bc:	f7fc f8a8 	bl	8000210 <memchr>
 80040c0:	b140      	cbz	r0, 80040d4 <_vfiprintf_r+0x170>
 80040c2:	2340      	movs	r3, #64	; 0x40
 80040c4:	1b40      	subs	r0, r0, r5
 80040c6:	fa03 f000 	lsl.w	r0, r3, r0
 80040ca:	9b04      	ldr	r3, [sp, #16]
 80040cc:	4303      	orrs	r3, r0
 80040ce:	f108 0801 	add.w	r8, r8, #1
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	f898 1000 	ldrb.w	r1, [r8]
 80040d8:	482a      	ldr	r0, [pc, #168]	; (8004184 <_vfiprintf_r+0x220>)
 80040da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040de:	2206      	movs	r2, #6
 80040e0:	f108 0701 	add.w	r7, r8, #1
 80040e4:	f7fc f894 	bl	8000210 <memchr>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d037      	beq.n	800415c <_vfiprintf_r+0x1f8>
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <_vfiprintf_r+0x224>)
 80040ee:	bb1b      	cbnz	r3, 8004138 <_vfiprintf_r+0x1d4>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	3307      	adds	r3, #7
 80040f4:	f023 0307 	bic.w	r3, r3, #7
 80040f8:	3308      	adds	r3, #8
 80040fa:	9303      	str	r3, [sp, #12]
 80040fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fe:	444b      	add	r3, r9
 8004100:	9309      	str	r3, [sp, #36]	; 0x24
 8004102:	e750      	b.n	8003fa6 <_vfiprintf_r+0x42>
 8004104:	fb05 3202 	mla	r2, r5, r2, r3
 8004108:	2001      	movs	r0, #1
 800410a:	4688      	mov	r8, r1
 800410c:	e78a      	b.n	8004024 <_vfiprintf_r+0xc0>
 800410e:	2300      	movs	r3, #0
 8004110:	f108 0801 	add.w	r8, r8, #1
 8004114:	9305      	str	r3, [sp, #20]
 8004116:	4619      	mov	r1, r3
 8004118:	250a      	movs	r5, #10
 800411a:	4640      	mov	r0, r8
 800411c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004120:	3a30      	subs	r2, #48	; 0x30
 8004122:	2a09      	cmp	r2, #9
 8004124:	d903      	bls.n	800412e <_vfiprintf_r+0x1ca>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0c3      	beq.n	80040b2 <_vfiprintf_r+0x14e>
 800412a:	9105      	str	r1, [sp, #20]
 800412c:	e7c1      	b.n	80040b2 <_vfiprintf_r+0x14e>
 800412e:	fb05 2101 	mla	r1, r5, r1, r2
 8004132:	2301      	movs	r3, #1
 8004134:	4680      	mov	r8, r0
 8004136:	e7f0      	b.n	800411a <_vfiprintf_r+0x1b6>
 8004138:	ab03      	add	r3, sp, #12
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	4622      	mov	r2, r4
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <_vfiprintf_r+0x228>)
 8004140:	a904      	add	r1, sp, #16
 8004142:	4630      	mov	r0, r6
 8004144:	f3af 8000 	nop.w
 8004148:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800414c:	4681      	mov	r9, r0
 800414e:	d1d5      	bne.n	80040fc <_vfiprintf_r+0x198>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	065b      	lsls	r3, r3, #25
 8004154:	f53f af7e 	bmi.w	8004054 <_vfiprintf_r+0xf0>
 8004158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800415a:	e77d      	b.n	8004058 <_vfiprintf_r+0xf4>
 800415c:	ab03      	add	r3, sp, #12
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4622      	mov	r2, r4
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <_vfiprintf_r+0x228>)
 8004164:	a904      	add	r1, sp, #16
 8004166:	4630      	mov	r0, r6
 8004168:	f000 f888 	bl	800427c <_printf_i>
 800416c:	e7ec      	b.n	8004148 <_vfiprintf_r+0x1e4>
 800416e:	bf00      	nop
 8004170:	080046a8 	.word	0x080046a8
 8004174:	080046e8 	.word	0x080046e8
 8004178:	080046c8 	.word	0x080046c8
 800417c:	08004688 	.word	0x08004688
 8004180:	080046ee 	.word	0x080046ee
 8004184:	080046f2 	.word	0x080046f2
 8004188:	00000000 	.word	0x00000000
 800418c:	08003f3f 	.word	0x08003f3f

08004190 <_printf_common>:
 8004190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	4691      	mov	r9, r2
 8004196:	461f      	mov	r7, r3
 8004198:	688a      	ldr	r2, [r1, #8]
 800419a:	690b      	ldr	r3, [r1, #16]
 800419c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bfb8      	it	lt
 80041a4:	4613      	movlt	r3, r2
 80041a6:	f8c9 3000 	str.w	r3, [r9]
 80041aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ae:	4606      	mov	r6, r0
 80041b0:	460c      	mov	r4, r1
 80041b2:	b112      	cbz	r2, 80041ba <_printf_common+0x2a>
 80041b4:	3301      	adds	r3, #1
 80041b6:	f8c9 3000 	str.w	r3, [r9]
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	0699      	lsls	r1, r3, #26
 80041be:	bf42      	ittt	mi
 80041c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041c4:	3302      	addmi	r3, #2
 80041c6:	f8c9 3000 	strmi.w	r3, [r9]
 80041ca:	6825      	ldr	r5, [r4, #0]
 80041cc:	f015 0506 	ands.w	r5, r5, #6
 80041d0:	d107      	bne.n	80041e2 <_printf_common+0x52>
 80041d2:	f104 0a19 	add.w	sl, r4, #25
 80041d6:	68e3      	ldr	r3, [r4, #12]
 80041d8:	f8d9 2000 	ldr.w	r2, [r9]
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	42ab      	cmp	r3, r5
 80041e0:	dc28      	bgt.n	8004234 <_printf_common+0xa4>
 80041e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	3300      	adds	r3, #0
 80041ea:	bf18      	it	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	0692      	lsls	r2, r2, #26
 80041f0:	d42d      	bmi.n	800424e <_printf_common+0xbe>
 80041f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041f6:	4639      	mov	r1, r7
 80041f8:	4630      	mov	r0, r6
 80041fa:	47c0      	blx	r8
 80041fc:	3001      	adds	r0, #1
 80041fe:	d020      	beq.n	8004242 <_printf_common+0xb2>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	68e5      	ldr	r5, [r4, #12]
 8004204:	f8d9 2000 	ldr.w	r2, [r9]
 8004208:	f003 0306 	and.w	r3, r3, #6
 800420c:	2b04      	cmp	r3, #4
 800420e:	bf08      	it	eq
 8004210:	1aad      	subeq	r5, r5, r2
 8004212:	68a3      	ldr	r3, [r4, #8]
 8004214:	6922      	ldr	r2, [r4, #16]
 8004216:	bf0c      	ite	eq
 8004218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800421c:	2500      	movne	r5, #0
 800421e:	4293      	cmp	r3, r2
 8004220:	bfc4      	itt	gt
 8004222:	1a9b      	subgt	r3, r3, r2
 8004224:	18ed      	addgt	r5, r5, r3
 8004226:	f04f 0900 	mov.w	r9, #0
 800422a:	341a      	adds	r4, #26
 800422c:	454d      	cmp	r5, r9
 800422e:	d11a      	bne.n	8004266 <_printf_common+0xd6>
 8004230:	2000      	movs	r0, #0
 8004232:	e008      	b.n	8004246 <_printf_common+0xb6>
 8004234:	2301      	movs	r3, #1
 8004236:	4652      	mov	r2, sl
 8004238:	4639      	mov	r1, r7
 800423a:	4630      	mov	r0, r6
 800423c:	47c0      	blx	r8
 800423e:	3001      	adds	r0, #1
 8004240:	d103      	bne.n	800424a <_printf_common+0xba>
 8004242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424a:	3501      	adds	r5, #1
 800424c:	e7c3      	b.n	80041d6 <_printf_common+0x46>
 800424e:	18e1      	adds	r1, r4, r3
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	2030      	movs	r0, #48	; 0x30
 8004254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004258:	4422      	add	r2, r4
 800425a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800425e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004262:	3302      	adds	r3, #2
 8004264:	e7c5      	b.n	80041f2 <_printf_common+0x62>
 8004266:	2301      	movs	r3, #1
 8004268:	4622      	mov	r2, r4
 800426a:	4639      	mov	r1, r7
 800426c:	4630      	mov	r0, r6
 800426e:	47c0      	blx	r8
 8004270:	3001      	adds	r0, #1
 8004272:	d0e6      	beq.n	8004242 <_printf_common+0xb2>
 8004274:	f109 0901 	add.w	r9, r9, #1
 8004278:	e7d8      	b.n	800422c <_printf_common+0x9c>
	...

0800427c <_printf_i>:
 800427c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004284:	460c      	mov	r4, r1
 8004286:	7e09      	ldrb	r1, [r1, #24]
 8004288:	b085      	sub	sp, #20
 800428a:	296e      	cmp	r1, #110	; 0x6e
 800428c:	4617      	mov	r7, r2
 800428e:	4606      	mov	r6, r0
 8004290:	4698      	mov	r8, r3
 8004292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004294:	f000 80b3 	beq.w	80043fe <_printf_i+0x182>
 8004298:	d822      	bhi.n	80042e0 <_printf_i+0x64>
 800429a:	2963      	cmp	r1, #99	; 0x63
 800429c:	d036      	beq.n	800430c <_printf_i+0x90>
 800429e:	d80a      	bhi.n	80042b6 <_printf_i+0x3a>
 80042a0:	2900      	cmp	r1, #0
 80042a2:	f000 80b9 	beq.w	8004418 <_printf_i+0x19c>
 80042a6:	2958      	cmp	r1, #88	; 0x58
 80042a8:	f000 8083 	beq.w	80043b2 <_printf_i+0x136>
 80042ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80042b4:	e032      	b.n	800431c <_printf_i+0xa0>
 80042b6:	2964      	cmp	r1, #100	; 0x64
 80042b8:	d001      	beq.n	80042be <_printf_i+0x42>
 80042ba:	2969      	cmp	r1, #105	; 0x69
 80042bc:	d1f6      	bne.n	80042ac <_printf_i+0x30>
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	0605      	lsls	r5, r0, #24
 80042c4:	f103 0104 	add.w	r1, r3, #4
 80042c8:	d52a      	bpl.n	8004320 <_printf_i+0xa4>
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6011      	str	r1, [r2, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da03      	bge.n	80042da <_printf_i+0x5e>
 80042d2:	222d      	movs	r2, #45	; 0x2d
 80042d4:	425b      	negs	r3, r3
 80042d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042da:	486f      	ldr	r0, [pc, #444]	; (8004498 <_printf_i+0x21c>)
 80042dc:	220a      	movs	r2, #10
 80042de:	e039      	b.n	8004354 <_printf_i+0xd8>
 80042e0:	2973      	cmp	r1, #115	; 0x73
 80042e2:	f000 809d 	beq.w	8004420 <_printf_i+0x1a4>
 80042e6:	d808      	bhi.n	80042fa <_printf_i+0x7e>
 80042e8:	296f      	cmp	r1, #111	; 0x6f
 80042ea:	d020      	beq.n	800432e <_printf_i+0xb2>
 80042ec:	2970      	cmp	r1, #112	; 0x70
 80042ee:	d1dd      	bne.n	80042ac <_printf_i+0x30>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f043 0320 	orr.w	r3, r3, #32
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	e003      	b.n	8004302 <_printf_i+0x86>
 80042fa:	2975      	cmp	r1, #117	; 0x75
 80042fc:	d017      	beq.n	800432e <_printf_i+0xb2>
 80042fe:	2978      	cmp	r1, #120	; 0x78
 8004300:	d1d4      	bne.n	80042ac <_printf_i+0x30>
 8004302:	2378      	movs	r3, #120	; 0x78
 8004304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004308:	4864      	ldr	r0, [pc, #400]	; (800449c <_printf_i+0x220>)
 800430a:	e055      	b.n	80043b8 <_printf_i+0x13c>
 800430c:	6813      	ldr	r3, [r2, #0]
 800430e:	1d19      	adds	r1, r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6011      	str	r1, [r2, #0]
 8004314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800431c:	2301      	movs	r3, #1
 800431e:	e08c      	b.n	800443a <_printf_i+0x1be>
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6011      	str	r1, [r2, #0]
 8004324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004328:	bf18      	it	ne
 800432a:	b21b      	sxthne	r3, r3
 800432c:	e7cf      	b.n	80042ce <_printf_i+0x52>
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	6825      	ldr	r5, [r4, #0]
 8004332:	1d18      	adds	r0, r3, #4
 8004334:	6010      	str	r0, [r2, #0]
 8004336:	0628      	lsls	r0, r5, #24
 8004338:	d501      	bpl.n	800433e <_printf_i+0xc2>
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	e002      	b.n	8004344 <_printf_i+0xc8>
 800433e:	0668      	lsls	r0, r5, #25
 8004340:	d5fb      	bpl.n	800433a <_printf_i+0xbe>
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	4854      	ldr	r0, [pc, #336]	; (8004498 <_printf_i+0x21c>)
 8004346:	296f      	cmp	r1, #111	; 0x6f
 8004348:	bf14      	ite	ne
 800434a:	220a      	movne	r2, #10
 800434c:	2208      	moveq	r2, #8
 800434e:	2100      	movs	r1, #0
 8004350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004354:	6865      	ldr	r5, [r4, #4]
 8004356:	60a5      	str	r5, [r4, #8]
 8004358:	2d00      	cmp	r5, #0
 800435a:	f2c0 8095 	blt.w	8004488 <_printf_i+0x20c>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	f021 0104 	bic.w	r1, r1, #4
 8004364:	6021      	str	r1, [r4, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d13d      	bne.n	80043e6 <_printf_i+0x16a>
 800436a:	2d00      	cmp	r5, #0
 800436c:	f040 808e 	bne.w	800448c <_printf_i+0x210>
 8004370:	4665      	mov	r5, ip
 8004372:	2a08      	cmp	r2, #8
 8004374:	d10b      	bne.n	800438e <_printf_i+0x112>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	07db      	lsls	r3, r3, #31
 800437a:	d508      	bpl.n	800438e <_printf_i+0x112>
 800437c:	6923      	ldr	r3, [r4, #16]
 800437e:	6862      	ldr	r2, [r4, #4]
 8004380:	429a      	cmp	r2, r3
 8004382:	bfde      	ittt	le
 8004384:	2330      	movle	r3, #48	; 0x30
 8004386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800438a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800438e:	ebac 0305 	sub.w	r3, ip, r5
 8004392:	6123      	str	r3, [r4, #16]
 8004394:	f8cd 8000 	str.w	r8, [sp]
 8004398:	463b      	mov	r3, r7
 800439a:	aa03      	add	r2, sp, #12
 800439c:	4621      	mov	r1, r4
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff fef6 	bl	8004190 <_printf_common>
 80043a4:	3001      	adds	r0, #1
 80043a6:	d14d      	bne.n	8004444 <_printf_i+0x1c8>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ac:	b005      	add	sp, #20
 80043ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043b2:	4839      	ldr	r0, [pc, #228]	; (8004498 <_printf_i+0x21c>)
 80043b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80043b8:	6813      	ldr	r3, [r2, #0]
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	1d1d      	adds	r5, r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6015      	str	r5, [r2, #0]
 80043c2:	060a      	lsls	r2, r1, #24
 80043c4:	d50b      	bpl.n	80043de <_printf_i+0x162>
 80043c6:	07ca      	lsls	r2, r1, #31
 80043c8:	bf44      	itt	mi
 80043ca:	f041 0120 	orrmi.w	r1, r1, #32
 80043ce:	6021      	strmi	r1, [r4, #0]
 80043d0:	b91b      	cbnz	r3, 80043da <_printf_i+0x15e>
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	f022 0220 	bic.w	r2, r2, #32
 80043d8:	6022      	str	r2, [r4, #0]
 80043da:	2210      	movs	r2, #16
 80043dc:	e7b7      	b.n	800434e <_printf_i+0xd2>
 80043de:	064d      	lsls	r5, r1, #25
 80043e0:	bf48      	it	mi
 80043e2:	b29b      	uxthmi	r3, r3
 80043e4:	e7ef      	b.n	80043c6 <_printf_i+0x14a>
 80043e6:	4665      	mov	r5, ip
 80043e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80043ec:	fb02 3311 	mls	r3, r2, r1, r3
 80043f0:	5cc3      	ldrb	r3, [r0, r3]
 80043f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043f6:	460b      	mov	r3, r1
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d1f5      	bne.n	80043e8 <_printf_i+0x16c>
 80043fc:	e7b9      	b.n	8004372 <_printf_i+0xf6>
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	6825      	ldr	r5, [r4, #0]
 8004402:	6961      	ldr	r1, [r4, #20]
 8004404:	1d18      	adds	r0, r3, #4
 8004406:	6010      	str	r0, [r2, #0]
 8004408:	0628      	lsls	r0, r5, #24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	d501      	bpl.n	8004412 <_printf_i+0x196>
 800440e:	6019      	str	r1, [r3, #0]
 8004410:	e002      	b.n	8004418 <_printf_i+0x19c>
 8004412:	066a      	lsls	r2, r5, #25
 8004414:	d5fb      	bpl.n	800440e <_printf_i+0x192>
 8004416:	8019      	strh	r1, [r3, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	4665      	mov	r5, ip
 800441e:	e7b9      	b.n	8004394 <_printf_i+0x118>
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	1d19      	adds	r1, r3, #4
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	681d      	ldr	r5, [r3, #0]
 8004428:	6862      	ldr	r2, [r4, #4]
 800442a:	2100      	movs	r1, #0
 800442c:	4628      	mov	r0, r5
 800442e:	f7fb feef 	bl	8000210 <memchr>
 8004432:	b108      	cbz	r0, 8004438 <_printf_i+0x1bc>
 8004434:	1b40      	subs	r0, r0, r5
 8004436:	6060      	str	r0, [r4, #4]
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	6123      	str	r3, [r4, #16]
 800443c:	2300      	movs	r3, #0
 800443e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004442:	e7a7      	b.n	8004394 <_printf_i+0x118>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	462a      	mov	r2, r5
 8004448:	4639      	mov	r1, r7
 800444a:	4630      	mov	r0, r6
 800444c:	47c0      	blx	r8
 800444e:	3001      	adds	r0, #1
 8004450:	d0aa      	beq.n	80043a8 <_printf_i+0x12c>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	079b      	lsls	r3, r3, #30
 8004456:	d413      	bmi.n	8004480 <_printf_i+0x204>
 8004458:	68e0      	ldr	r0, [r4, #12]
 800445a:	9b03      	ldr	r3, [sp, #12]
 800445c:	4298      	cmp	r0, r3
 800445e:	bfb8      	it	lt
 8004460:	4618      	movlt	r0, r3
 8004462:	e7a3      	b.n	80043ac <_printf_i+0x130>
 8004464:	2301      	movs	r3, #1
 8004466:	464a      	mov	r2, r9
 8004468:	4639      	mov	r1, r7
 800446a:	4630      	mov	r0, r6
 800446c:	47c0      	blx	r8
 800446e:	3001      	adds	r0, #1
 8004470:	d09a      	beq.n	80043a8 <_printf_i+0x12c>
 8004472:	3501      	adds	r5, #1
 8004474:	68e3      	ldr	r3, [r4, #12]
 8004476:	9a03      	ldr	r2, [sp, #12]
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	42ab      	cmp	r3, r5
 800447c:	dcf2      	bgt.n	8004464 <_printf_i+0x1e8>
 800447e:	e7eb      	b.n	8004458 <_printf_i+0x1dc>
 8004480:	2500      	movs	r5, #0
 8004482:	f104 0919 	add.w	r9, r4, #25
 8004486:	e7f5      	b.n	8004474 <_printf_i+0x1f8>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ac      	bne.n	80043e6 <_printf_i+0x16a>
 800448c:	7803      	ldrb	r3, [r0, #0]
 800448e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004496:	e76c      	b.n	8004372 <_printf_i+0xf6>
 8004498:	080046f9 	.word	0x080046f9
 800449c:	0800470a 	.word	0x0800470a

080044a0 <_sbrk_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4c06      	ldr	r4, [pc, #24]	; (80044bc <_sbrk_r+0x1c>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	4605      	mov	r5, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	f7fc fb26 	bl	8000afc <_sbrk>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_sbrk_r+0x1a>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_sbrk_r+0x1a>
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20000164 	.word	0x20000164

080044c0 <__sread>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	460c      	mov	r4, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	f000 f896 	bl	80045f8 <_read_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	bfab      	itete	ge
 80044d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044d2:	89a3      	ldrhlt	r3, [r4, #12]
 80044d4:	181b      	addge	r3, r3, r0
 80044d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044da:	bfac      	ite	ge
 80044dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044de:	81a3      	strhlt	r3, [r4, #12]
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <__swrite>:
 80044e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e6:	461f      	mov	r7, r3
 80044e8:	898b      	ldrh	r3, [r1, #12]
 80044ea:	05db      	lsls	r3, r3, #23
 80044ec:	4605      	mov	r5, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	4616      	mov	r6, r2
 80044f2:	d505      	bpl.n	8004500 <__swrite+0x1e>
 80044f4:	2302      	movs	r3, #2
 80044f6:	2200      	movs	r2, #0
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	f000 f868 	bl	80045d0 <_lseek_r>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	4628      	mov	r0, r5
 8004512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	f000 b817 	b.w	8004548 <_write_r>

0800451a <__sseek>:
 800451a:	b510      	push	{r4, lr}
 800451c:	460c      	mov	r4, r1
 800451e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004522:	f000 f855 	bl	80045d0 <_lseek_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	bf15      	itete	ne
 800452c:	6560      	strne	r0, [r4, #84]	; 0x54
 800452e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004536:	81a3      	strheq	r3, [r4, #12]
 8004538:	bf18      	it	ne
 800453a:	81a3      	strhne	r3, [r4, #12]
 800453c:	bd10      	pop	{r4, pc}

0800453e <__sclose>:
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 b813 	b.w	800456c <_close_r>
	...

08004548 <_write_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4c07      	ldr	r4, [pc, #28]	; (8004568 <_write_r+0x20>)
 800454c:	4605      	mov	r5, r0
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	2200      	movs	r2, #0
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f7fc f930 	bl	80007bc <_write>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_write_r+0x1e>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	b103      	cbz	r3, 8004566 <_write_r+0x1e>
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000164 	.word	0x20000164

0800456c <_close_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4c06      	ldr	r4, [pc, #24]	; (8004588 <_close_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4605      	mov	r5, r0
 8004574:	4608      	mov	r0, r1
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	f7fc fa8b 	bl	8000a92 <_close>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_close_r+0x1a>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	b103      	cbz	r3, 8004586 <_close_r+0x1a>
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000164 	.word	0x20000164

0800458c <_fstat_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4c07      	ldr	r4, [pc, #28]	; (80045ac <_fstat_r+0x20>)
 8004590:	2300      	movs	r3, #0
 8004592:	4605      	mov	r5, r0
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	f7fc fa86 	bl	8000aaa <_fstat>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d102      	bne.n	80045a8 <_fstat_r+0x1c>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	b103      	cbz	r3, 80045a8 <_fstat_r+0x1c>
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	bd38      	pop	{r3, r4, r5, pc}
 80045aa:	bf00      	nop
 80045ac:	20000164 	.word	0x20000164

080045b0 <_isatty_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4c06      	ldr	r4, [pc, #24]	; (80045cc <_isatty_r+0x1c>)
 80045b4:	2300      	movs	r3, #0
 80045b6:	4605      	mov	r5, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	f7fc fa85 	bl	8000aca <_isatty>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_isatty_r+0x1a>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_isatty_r+0x1a>
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	20000164 	.word	0x20000164

080045d0 <_lseek_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4c07      	ldr	r4, [pc, #28]	; (80045f0 <_lseek_r+0x20>)
 80045d4:	4605      	mov	r5, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	6022      	str	r2, [r4, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7fc fa7e 	bl	8000ae0 <_lseek>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_lseek_r+0x1e>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_lseek_r+0x1e>
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	20000164 	.word	0x20000164

080045f4 <__malloc_lock>:
 80045f4:	4770      	bx	lr

080045f6 <__malloc_unlock>:
 80045f6:	4770      	bx	lr

080045f8 <_read_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4c07      	ldr	r4, [pc, #28]	; (8004618 <_read_r+0x20>)
 80045fc:	4605      	mov	r5, r0
 80045fe:	4608      	mov	r0, r1
 8004600:	4611      	mov	r1, r2
 8004602:	2200      	movs	r2, #0
 8004604:	6022      	str	r2, [r4, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	f7fc fa26 	bl	8000a58 <_read>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_read_r+0x1e>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	b103      	cbz	r3, 8004616 <_read_r+0x1e>
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	20000164 	.word	0x20000164

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
